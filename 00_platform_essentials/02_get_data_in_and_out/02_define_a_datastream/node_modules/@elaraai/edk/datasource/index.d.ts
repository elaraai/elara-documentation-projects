// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

/**
 * The {@link Datasource} module facilitates creation streaming interfaces with external systems (such as an api with a {@link RestApiSource}) or files (such as a json file with a {@link JsonSource}) to provide continuous streams of input data.
 *
 * @module Datasource
 *
 * @example
 *  ```typescript
 *  // and assuming a 'repos' request response body type
 *  const response_body_type = ArrayType(StructType({
 *      id: 'float',
 *      node_id: 'string',
 *      name: 'string',
 *      full_name: 'string',
 *      url: 'string',
 *      description: 'string',
 *      owner: StructType({
 *          login: 'string',
 *          id: 'float',
 *          url: 'string',
 *      }),
 *  }));
 *
 *  // and assuming a 'repos' request response header type
 *  const response_header_type = StructType({
 *      server: 'string',
 *      connection: 'string',
 *      // ...
 *      etag: 'string',
 *  });
 *
 *
 *  // for example, create an ELARASchema containing a RestApiSourceDefinition to query github for the repos associated with a user, including a sub-query based on each returned row.
 *  const source = RestApiSource({
 *      name: "Guthub Rest",
 *      poll: Poll({
 *          // ...
 *      }),
 *      authorisation: RestApiAuthorisation({
 *          //...
 *      }),
 *      endpoints: {
 *          repos: RestApiEndpoint({
 *              request: RestApiRequest({
 *                  url: StringJoin`https://api.github.com/users/${Environment("GITHUB_USER")}/repos`,
 *                  method: 'GET',
 *                  accept: 'application/json',
 *                  headers: Struct({
 *                      Accept: Const("application/vnd.github.v3+json"),
 *                      Authorization: StringJoin`token ${GetField(Variable("token", rest_token_response_body_type), "access_token")}`
 *                  }),
 *                  // retry if the number of allowable requests is exhausted (status_code comes form response scope)
 *                  retry: Const(false),
 *                  // pause a minute if the number of allowable requests is exhausted (status_code comes form response scope)
 *                  delay_ms: Const(400n),
 *                  content: 'application/x-www-form-urlencoded',
 *                  datetime_variable: Variable("request_datetime", 'datetime'),
 *              }),
 *              response: RestApiResponse({
 *                  status_code_variable: Variable("status_code", 'integer'),
 *                  status_text_variable: Variable("status_text", 'string'),
 *                  headers: Parse(Variable("headers", response_header_type)),
 *                  headers_variable: Variable("headers", response_header_type),
 *                  body: Parse(Variable("body", response_body_type)),
 *                  body_variable: Variable("body", response_body_type),
 *                  value: Variable("body", response_body_type),
 *              }),
 *              elements: {
 *                  sub_query: RestApiEndpointArrayElement({
 *                      // ...
 *                  })
 *              }
 *          }),
 *      }
 *  })
 * ```
 */
export * from './DataSource';
