// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import ts from 'ts-morph';
import { DataSourceDefinition, EastType, ELARAConfig, ELARASchema, EntityAsset, LogLevel, PageDefinition, TimeUnit, URIString, VisualType } from './lib';
/**
 * Load the config for an ELARA solution.
 *
 * @param dir: the directory containing the solution.
 * @return the {@link ELARAConfig} for the project.
 *
 * @category Solution
 */
export declare function config(dir: string): Promise<ELARAConfig | null>;
/**
 * Defines the arguments for the {@link init} command.
 *
 * @category Solution
 */
export declare type InitArguments = {
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the ELARA solution name */
    name: string;
    /** the EDK version */
    version: string;
};
/**
 * Initialise a new ELARA solution and generate base artefacts.
 * @param args: the desired {@link InitArguments}.
 * @return the {@link ELARAConfig} for the new project.
 *
 * @remarks This command will create the solution directory if it doesnt exist already, otherwise will fail if an existing solution exists in the directory.
 *
 * @category Solution
 */
export declare function init(args: InitArguments): Promise<ELARAConfig | null>;
/**
 * Defines the arguments for the {@link addPanelPage} and {@link addUserPage} commands.
 *
 * @category Application
 */
export declare type PageArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link PanelPageDefinition}.
 *
 * @param args: the desired {@link PageArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category Application
 */
export declare function addPanelPage(args: PageArguments): ELARAConfig | null;
/**
 * Defines the arguments for the {@link addVisual} and {@link addUserVisual} commands.
 *
 * @category Application
 */
export declare type VisualArguments = {
    /** the entity name */
    name: string;
    /** the visual type to create */
    type: VisualType;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link VisualDefinition}.
 *
 * @param args: the desired {@link VisualArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category Application
 */
export declare function addVisual(args: VisualArguments): ELARAConfig | null;
/**
 * Create a new {@link UserPageDefinition}.
 *
 * @param args: the desired {@link PageArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category Application
 */
export declare function addUserPage(args: PageArguments): ELARAConfig | null;
/** @internal */
export declare function addPage(args: {
    page: PageDefinition;
    dir: string;
    def_dir: string;
    gen_dir: string;
    config: ELARAConfig;
}): ELARAConfig;
/**
 * Defines the arguments for {@link addArrayDataSource} command.
 *
 * @category DataSource
 */
export declare type ArrayDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ArrayDataSourceDefinition}.
 *
 * @param args: the desired {@link ArrayDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addArrayDataSource(args: ArrayDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addCsvDataSource} command.
 *
 * @category DataSource
 */
export declare type CsvDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the ftp, sftp or file uri */
    uri: URIString<'file://' | 'ftp://' | 'sftp://'>;
};
/**
 * Create a new {@link CsvDataSourceDefinition}.
 *
 * @param args: the desired {@link CsvDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addCsvDataSource(args: CsvDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addJsonDataSource} command.
 *
 * @category DataSource
 */
export declare type JsonDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the ftp, sftp or file uri */
    uri: URIString<'file://' | 'ftp://' | 'sftp://'>;
};
/**
 * Create a new {@link JsonDataSourceDefinition}.
 *
 * @param args: the desired {@link JsonDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addJsonDataSource(args: JsonDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addRestApiDataSource} command.
 *
 * @category DataSource
 */
export declare type RestApiDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link RestApiDataSourceDefinition}.
 *
 * @param args: the desired {@link RestApiDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addRestApiDataSource(args: RestApiDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addRangeDataSource} command.
 *
 * @category DataSource
 */
export declare type RangeDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the first number in the range */
    start: number;
    /** the last number in the range */
    stop: number;
    /** the step size for each {@link Row} */
    step: number;
};
/**
 * Create a new {@link RangeDataSourceDefinition}.
 *
 * @param args: the desired {@link RangeDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addRangeDataSource(args: RangeDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addClockDataSource} command.
 *
 * @category DataSource
 */
export declare type ClockDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the time period in units between rows */
    period: number;
    /** the number of cycles in the past to include in the output */
    past_cycles: number;
    /** the number of cycles in the future to include in the output */
    future_cycles: number;
    /** the unit of time for each row */
    unit: TimeUnit;
};
/**
 * Create a new {@link ClockDataSourceDefinition}.
 *
 * @param args: the desired {@link ClockDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addClockDataSource(args: ClockDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addSqlDataSource} command.
 *
 * @category DataSource
 */
export declare type SqlDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the mssql uri */
    uri: URIString<'mssql://'>;
    /** the string for the username */
    username: string;
    /** the string for the password */
    password: string;
};
/**
 * Create a new {@link SqlDataSourceDefinition}.
 *
 * @param args: the desired {@link SqlDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addSqlDataSource(args: SqlDataSourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addSqlChangeTrackingDataSource} command.
 *
 * @category DataSource
 */
export declare type SqlChangeTrackingDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the string for initialize stored procedure name */
    initialize: string;
    /** the string for update stored procedure name */
    update: string;
    /** the strings for table names */
    tables: string[];
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the mssql uri */
    uri: URIString<'mssql://'>;
    /** the string for the username */
    username: string;
    /** the string for the password */
    password: string;
};
/**
 * Create a new {@link SqlChangeTrackingDataSourceDefinition}.
 *
 * @param args: the desired {@link SqlChangeTrackingDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addSqlChangeTrackingDataSource(args: SqlChangeTrackingDataSourceArguments): Promise<ELARAConfig | null>;
/**
 * Defines the arguments for {@link addExcelDataSource} command.
 *
 * @category DataSource
 */
export declare type ExcelDataSourceArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
    /** the ftp, sftp or file uri */
    uri: URIString<'file://' | 'ftp://' | 'sftp://'>;
};
/**
 * Create a new {@link ExcelDataSourceDefinition}.
 *
 * @param args: the desired {@link ExcelDataSourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will create the entity if it doesnt exist already, otherwise will fail if a matching directory already exists.
 *
 * @category DataSource
 */
export declare function addExcelDataSource(args: ExcelDataSourceArguments): ELARAConfig | null;
/** @internal */
export declare function addDataSource(args: {
    definition: DataSourceDefinition;
    types?: Record<string, EastType>;
    dir: string;
    def_dir: string;
    gen_dir: string;
    config: ELARAConfig;
    replace: boolean;
}): ELARAConfig;
/**
 * Defines the arguments for {@link addPipeline} command.
 *
 * @category Pipeline
 */
export declare type PipelineArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link PipelineDefinition}.
 *
 * @param args: the desired {@link PipelineArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Pipeline
 */
export declare function addPipeline(args: PipelineArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addView} command.
 *
 * @category Analytics
 */
export declare type ViewArguments = {
    /** the entity name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ViewDefinition}.
 *
 * @param args: the desired {@link ViewArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Analytics
 */
export declare function addView(args: ViewArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addUser} command.
 *
 * @category Admin
 */
export declare type UserArguments = {
    /** the user's name */
    name: string;
    /** the user's email */
    email: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link UserDefinition}.
 *
 * @param args: the desired {@link UserArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Admin
 */
export declare function addUser(args: UserArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addEnvironment} command.
 *
 * @category Admin
 */
export declare type EnvironmentArguments = {
    /** the environment variable name */
    name: string;
    /** true if the environment should be overwritten on deployment */
    overwrite: boolean;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link EnvironmentDefinition}.
 *
 * @param args: the desired {@link EnvironmentArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Admin
 */
export declare function addEnvironment(args: EnvironmentArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addAgentStructure} command.
 *
 * @category Structure
 */
export declare type AgentArguments = {
    /** the agent concept */
    concept: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link AgentDefinition}.
 *
 * @param args: the desired {@link AgentArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Structure
 */
export declare function addAgentStructure(args: AgentArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addResourceStructure} command.
 *
 * @category Structure
 */
export declare type ResourceArguments = {
    /** the resource concept */
    concept: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ResourceDefinition}.
 *
 * @param args: the desired {@link ResourceArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Structure
 */
export declare function addResourceStructure(args: ResourceArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addProcessStructure} command.
 *
 * @category Structure
 */
export declare type ProcessArguments = {
    /** the process concept */
    concept: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ProcessDefinition}.
 *
 * @param args: the desired {@link ProcessArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Structure
 */
export declare function addProcessStructure(args: ProcessArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addPlugin} command.
 *
 * @category Plugin
 */
export declare type PluginArguments = {
    /** the plugin name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ELARASchema}.
 *
 * @param args: the desired {@link PluginArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Plugin
 */
export declare function addPlugin(args: PluginArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addApplication} command.
 *
 * @category Application
 */
export declare type ApplicationArguments = {
    /** the application name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ApplicationDefinition}.
 *
 * @param args: the desired {@link ApplicationArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Application
 */
export declare function addApplication(args: ApplicationArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link addScenario} command.
 *
 * @category Structure
 */
export declare type ScenarioArguments = {
    /** the scneario name */
    name: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the relative dir path for the definition file */
    def_dir: string;
    /** the relative dir path for the generated file */
    gen_dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a new {@link ScenarionDefinition}.
 *
 * @param args: the desired {@link ScenarioArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @remarks This command will edit the entity if it exists already, otherwise will fail if a matching datasource doesnt exist.
 *
 * @category Structure
 */
export declare function addScenario(args: ScenarioArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link updateAssets} command.
 *
 * @category Solution
 */
export declare type UpdateArguments = {
    /** the name of an asset to update */
    asset?: string | null;
    /** the type of assets to update */
    type?: string | null;
    /** set to true if a clean should occur */
    clean: boolean | null;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Update the generated assets in a solution.
 *
 * @param args: the desired {@link UpdateArguments}.
 * @return true if the update was successful.
 *
 * @category Solution
 */
export declare function updateAssets(args: UpdateArguments): Promise<boolean>;
/**
 * Defines the arguments for {@link removeAsset} command.
 *
 * @category Solution
 */
export declare type RemoveArguments = {
    /** the asset to remove */
    asset: string | null;
    /** set to true if a all assets should be removed */
    all: boolean | null;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Remove an asset from a solution.
 *
 * @param args: the desired {@link RemoveArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 * @category Solution
 */
export declare function removeAsset(args: RemoveArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link linkedAssets} command.
 *
 * @category Solution
 */
export declare type LinkedArguments = {
    /** the asset to find the dependancies/dependants for */
    asset: string;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Find the linked assets in a solution.
 *
 * @param args: the desired {@link DependantArguments}.
 * @return the project {@link ELARAConfig}.
 *
 * @category Solution
 */
export declare function linkedAssets(args: LinkedArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link buildSchema} command.
 *
 * @category Solution
 */
export declare type BuildArguments = {
    /** set to true if the build should commence with a clean */
    clean: boolean | null;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Build the solution {@link ELARASchema}.
 *
 * @param args: the desired {@link BuildArguments}.
 * @return true if the update was successful.
 *
 * @category Solution
 */
export declare function buildSchema(args: BuildArguments): boolean;
/**
 * Defines the arguments for {@link getAssetSchema} command.
 *
 * @category Solution
 */
export declare type AssetSchemaArguments = {
    /** the asset to remove */
    asset: string | null;
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Get an asset schema from a solution.
 *
 * @param args: the desired {@link AssetSchemaArguments}.
 * @return the related asset {@link ELARASchema}.
 *
 * @category Solution
 */
export declare function assetSchema(args: AssetSchemaArguments): ELARASchema | null;
/**
 * Defines the arguments for {@link addDeployment} command.
 *
 * @category Solution
 */
export declare type DeploymentArguments = {
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the ELARA server url */
    server: string;
    /** the application to include in the solution */
    application?: string;
    /** the deployment name */
    name: string;
    /** the log level to apply to the deployment */
    loglevel?: LogLevel;
    /** the number of training samples for the deployment */
    samples?: bigint;
    /** the number iterations when training a Guassian Process */
    iterations_gp: bigint | undefined;
    /** the number of iterations when training with XGBoost */
    iterations_xgb_opt: bigint | undefined;
    /** the number iterations to train the utility rate estimator */
    iterations_utility_est: bigint | undefined;
    /** the number of iterations optimization should use */
    optimization_iterations: bigint | undefined;
    /** the number of serial mini-iterations optimization should use per iteration */
    optimization_serial_iterations: bigint | undefined;
    /** the scale of randomness optimization should allow when exploring the cost surface (in units of the total objective function) */
    optimization_randomness: number | undefined;
    /** how frequently optimization will emit proposals - final result only, or every time a new "best" configuration is discovered */
    optimization_emit_proposals: "final" | "current_best" | "current_best_all" | undefined;
    /** the number of simulation trajectories for the deployment */
    trajectories?: bigint;
    /** the number of simulation trajectories for optimizations for the deployment */
    optimization_trajectories?: bigint;
    /** the number of simulation trajectories for sensitivity calculations for the deployment */
    sensitivity_trajectories?: bigint;
    /** set to true if the cli should prompt before deployment */
    warn?: boolean;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Create a deployment asset in the {@link ELARAConfig}.
 *
 * @param args: the desired {@link BuildArguments}.
 * @return the updated project {@link ELARAConfig}.
 *
 *
 * @category Solution
 */
export declare function addDeployment(args: DeploymentArguments): ELARAConfig | null;
/**
 * Defines the arguments for {@link deploySchema} command.
 *
 * @category Solution
 */
export declare type DeployArguments = {
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the deployment asset name to deploy */
    deployment: string;
    /** set to true if all environments should be overwritten */
    overwrite?: boolean;
    /** set to true if the deployment should show verbose logging */
    verbose?: boolean;
    /** set to true if a reset of all service should occur */
    restart?: boolean;
    /** flush the specified schema type instances */
    flush?: FlushType[];
    /** flush all but the specified schema type instances */
    keep?: Omit<FlushType, 'all'>[];
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * A deployment {@link FlushType}.
 * @param args: the desired {@link }.
 *
 * @remarks Deploying a {@link ELARASchema} requires that a deployment existing in the configuration, and the `EDK_CLIENT_ID` and `EDK_CLIENT_SECRET` system environment variables have been set with a valid ELARA server key value pair.
 *
 * @category Solution
 */
export declare type FlushType = 'all' | 'datasource' | 'training' | 'optimization' | 'system';
/**
 * Deploy the solution {@link ELARASchema}.
 * @param args: the desired {@link DeployArguments}.
 * @truen
 *
 * @remarks Deploying a {@link ELARASchema} requires that a deployment existing in the configuration, and the `EDK_CLIENT_ID` and `EDK_CLIENT_SECRET` system environment variables have been set with a valid ELARA server key value pair.
 *
 * @category Solution
 */
export declare function deploySchema(args: DeployArguments): Promise<boolean>;
/** @internal */
export declare function writeGenerated(asset: EntityAsset, dir: string, schema: ELARASchema, clean: boolean | null, project: ts.Project): Promise<void>;
/**
 * Defines the arguments for {@link getToken} command.
 *
 * @category Solution
 */
export declare type TokenArguments = {
    /** the ELARA solution directory absolute or relative path */
    dir: string;
    /** the deployment asset name to deploy */
    deployment: string;
    /** the current {@link ELARAConfig} */
    config: ELARAConfig;
};
/**
 * Get an authentication token {@link ELARASchema}.
 * @param args: the desired {@link TokenArguments}.
 * @truen
 *
 * @remarks Getting a token requires that a deployment existing in the configuration, and the `EDK_CLIENT_ID` and `EDK_CLIENT_SECRET` system environment variables have been set with a valid ELARA server key value pair.
 *
 * @category Solution
 */
export declare function getToken(args: TokenArguments): Promise<string | null>;
