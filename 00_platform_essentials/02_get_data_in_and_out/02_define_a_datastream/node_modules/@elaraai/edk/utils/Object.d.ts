// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

export declare function filterEntries<T>(obj: Record<string, T>, f: (key: string, value: T) => boolean): Record<string, T>;
export declare function filterValues<T>(obj: Record<string, T>, f: (value: T) => boolean): Record<string, T>;
export declare function filterKeys<T>(obj: Record<string, T>, f: (key: string) => boolean): Record<string, T>;
export declare function findEntry<T>(obj: Record<string, T>, f: (key: string, value: T) => boolean): [string, T] | null;
export declare function findValue<T>(obj: Record<string, T>, f: (value: T) => boolean): T | null;
export declare function mapKeys<T1, T2>(obj: Record<string, T1>, f: (key: string) => T2): Record<string, T2>;
export declare function mapEntries<T1, T2>(obj: Record<string, T1>, f: (key: string, value: T1) => T2): Record<string, T2>;
export declare function renameEntries<T1>(obj: Record<string, T1>, f: (key: string, value: T1) => string): Record<string, T1>;
export declare function sortKeys<T1>(obj: Record<string, T1>): Record<string, T1>;
export declare function countKeys<T1>(obj?: Record<string, T1>, f?: (key: string) => boolean): bigint;
export declare function countValues<T1>(obj: Record<string, T1>, f?: (value: T1) => boolean): bigint;
export declare function someValues<T1>(obj: Record<string, T1>, f?: (value: T1) => boolean): boolean;
export declare function mapValues<T1, T2>(obj: Record<string, T1>, f: (value: T1) => T2): Record<string, T2>;
export declare function forEachEntries<T>(obj: Record<string, T>, f: (key: string, value: T) => any): void;
export declare function forOfEntries<T>(obj: Record<string, T>, f: (key: string, value: T) => any): void;
export declare function forEachValues<T>(obj: Record<string, T>, f: (value: T, index?: number) => any): void;
export declare function forEachKeys<T>(obj: Record<string, T>, f: (value: string, index?: number) => any): void;
export declare function reduceValues<T>(obj: T[], f: (value: T) => string, value?: (value: T) => any): Record<string, T>;
export declare function fromMap<T>(obj: Map<string, T>): Record<string, T>;
export declare function toMap<T>(obj: Record<string, T>): Map<string, T>;
export declare function forOfValues<T>(obj: Record<string, T>, f: (value: T) => any): void;
export declare function combineObjects<T>(obj1: Record<string, T>, obj2: Record<string, T>): Record<string, T>;
export declare function neverProperty(x: never, property: string): any;
export declare function nestValues<T>(obj: Record<string, T>, name: string): Record<string, Record<string, T>>;
export declare function isPlainObject(x: any): x is Object;
export declare function patchObject(input: Object, patch: Object): void;
