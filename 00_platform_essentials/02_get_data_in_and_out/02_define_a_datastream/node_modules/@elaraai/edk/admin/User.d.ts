// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { ConstFunction, EnvironmentType } from "../east/functions";
import { ELARASchema } from "../schema/ELARASchema";
/** @internal */
export declare type UserType = 'static' | 'dynamic';
/** @internal */
export declare type User<T extends UserType = 'static'> = T extends 'dynamic' ? {
    type: 'dynamic';
    email: string;
    name: string;
    password: ConstFunction<"string"> | null;
    social_id: string | null;
    roles: string[];
    is_disabled: undefined;
    is_superuser: undefined;
    is_admin: undefined;
} : T extends 'static' ? {
    type: 'static';
    email: string;
    name: string;
    password: EnvironmentType<"string"> | null;
    social_id: string | null;
    roles: string[];
    is_disabled: boolean;
    is_superuser: boolean;
    is_admin: boolean;
} : never;
/**
 * Defines a {@link UserDefinition} for UI interaction.
 *
 * @category User
 */
export declare type UserDefinition = {
    /** the email address of the {@link User}.*/
    email: string;
    /** the {@link User}'s name' */
    name: string;
    /** the password {@link Expression} of the {@link User} */
    password?: EnvironmentType<"string"> | null;
    /** the secondary identity (social) of the {@link User} */
    social_id?: string;
    /** the {@link Role}'s' that the {@link User} is a member of */
    roles?: string[];
    /**  set to true if the {@link User} is disabled */
    is_disabled: boolean;
    /** set to true if the {@link User} is a superuser */
    is_superuser: boolean;
    /** set to true if the {@link User} is an admin (with user management access) */
    is_admin: boolean;
};
/**
 * Create a {@link User} for UI interaction.
 *
 * @param definition: the desired {@link UserDefinition}.
 * @return a valid {@link User}
 *
 * @category User
 *
 * @example
 *  ```typescript
 *  //To create a User called 'Bob' with 'admin' access and password by environment variable
 *  const user = User({
 *    email: 'bob@domain.com',
 *    name: 'Bob',
 *    password: Environment('ADMIN_PASSWORD'),
 *    roles: ['Worker', 'Manager'],
 *    is_disabled: false,
 *    is_superuser: false,
 *    is_admin: true
 * })
 * ```
 */
export declare function User(user: UserDefinition): UserDefinition;
/**
 * Create a {@link User} with superuser permissions for UI interaction.
 *
 * @param definition: the desired {@link UserDefinition}.
 * @return a valid {@link User}
 *
 * @category User
 *
 * @example
 *  ```typescript
 *  //To create a SuperUser called 'Bob'
 *  const user = SuperUser({
 *    email: 'bob@domain.com'
 *    name: 'Bob',
 *    password: Environment('ADMIN_PASSWORD')
 * })
 * ```
 */
export declare function SuperUser(user: Omit<UserDefinition, 'is_disabled' | 'is_superuser' | 'is_admin'>): UserDefinition;
/** @internal */
export declare function toUser(user: UserDefinition): User<'static'>;
/**
 * Create a {@link ELARASchema} containing a {@link User} of a specific identity.
 *
 * @param definition: the desired {@link UserDefinition}.
 * @return a valid {@link User} within a {@link ELARASchema}
 *
 * @category User
 *
 * @example
 *  ```typescript
 *  ///To create an ELARASchema containing a User called 'Bob' with 'admin' access and password by environment variable
 *  const user = UserSchema({
 *    email: 'bob@domain.com'
 *    name: 'Bob',
 *    password: Environment('ADMIN_PASSWORD'),
 *    roles: ['Worker', 'Manager'],
 *    is_disabled: false,
 *    is_superuser: false,
 *    is_admin: true
 * })
 * ```
 */
export declare function UserSchema(def: UserDefinition): ELARASchema;
