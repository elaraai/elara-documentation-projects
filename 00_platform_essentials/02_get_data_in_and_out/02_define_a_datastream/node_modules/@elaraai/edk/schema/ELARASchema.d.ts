// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Visual } from '../';
import { EnvironmentVariable } from '../admin/Environment';
import { User } from '../admin/User';
import { View } from '../analytics/View';
import { Table } from '../data/Table';
import { DataSource } from '../datasource/DataSource';
import { Application } from '../page/Application';
import { Page } from '../page/Page';
import { Pipeline } from '../pipeline/Pipeline';
import { Scenario } from '../structure/Scenario';
import { Instance, Mapping, Structure } from '../structure/Structure';
import { LogLevel } from './ELARAConfig';
/** @internal */
export declare type ELARASettings = {
    workspace?: string;
    store?: string;
    loglevel?: LogLevel;
    flush?: string[];
    keep?: string[];
    application?: string;
    training_samples?: bigint;
    training_iterations_gp?: bigint;
    training_iterations_xgb_opt?: bigint;
    training_iterations_utility_est?: bigint;
    optimization_iterations?: bigint;
    optimization_serial_iterations?: bigint;
    optimization_randomness?: number;
    optimization_emit_proposals?: "final" | "current_best" | "current_best_all";
    simulation_trajectories?: bigint;
    optimization_trajectories?: bigint;
    sensitivity_trajectories?: bigint;
    server?: string;
};
/**
 * The {@link ELARASchema} describing a solution end-to-end, spanning ingestion (ie. {@link DataSource}) to interaction (ie. {@link Application})
 *
 * @category Schema
 */
export declare type ELARASchema = {
    /** the solution name */
    name?: string;
    /** @internal */
    workspace?: string;
    /** @internal */
    version?: bigint;
    /** @internal */
    loglevel?: LogLevel;
    /** the collection of {@link View}s in the solution */
    view?: Record<string, View>;
    /** the collection of {@link Page}s in the solution */
    page?: Record<string, Page>;
    /** the collection of {@link Visual}s in the solution */
    visual?: Record<string, Visual>;
    /** the collection of {@link User}s in the solution */
    user?: Record<string, User>;
    /** the collection of {@link DataSource}s in the solution */
    datasource?: Record<string, DataSource>;
    /** the collection of {@link Pipeline}s in the solution */
    pipeline?: Record<string, Pipeline>;
    /** the collection of {@link Structure}s in the solution */
    structure?: Record<string, Structure>;
    /** the collection of {@link Mapping}s in the solution */
    mapping?: Record<string, Mapping>;
    /** the collection of {@link Instance}s in the solution */
    instance?: Record<string, Record<string, Instance>>;
    /** the collection of {@link Table}s in the solution */
    table?: Record<string, Table>;
    /** the collection of {@link Application}s in the solution */
    application?: Record<string, Application>;
    /** the collection of {@link Scenario}s in the solution */
    scenario?: Record<string, Scenario>;
    /** the collection of {@link EnvironmentVariable}s in the solution */
    environment?: Record<string, EnvironmentVariable>;
    /** @internal */
    settings?: ELARASettings;
};
/**
 * Merge one or more {@link ELARASchema} objects together.
 *
 * @param schema: the {@link ELARASchema} object to merge other `schemas` into
 * @param schemas: the other {@link ELARASchema} objects to merge into `schema` object
 * @returns a merged {@link ELARASchema}
 *
 * @category Schema
 *
 * @example
 * ```typescript
 *  // merge multiple schemas together
 *  const schema =  mergeSchemas(
 *      WeatherPlugin(),
 *      HolidaysPlugin(),
 *  )
 * ```
 */
export declare function mergeSchemas(schema?: ELARASchema, ...schemas: ELARASchema[]): ELARASchema;
