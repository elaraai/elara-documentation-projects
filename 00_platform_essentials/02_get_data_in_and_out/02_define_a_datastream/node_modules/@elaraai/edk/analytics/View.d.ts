// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { EastFunction, Variable } from '../east/functions';
import { EastType, PrimitiveType, SetType, StructType } from '../east/types';
import { Partition, Table } from '../data/Table';
import { StandardAggregation, StandardAggregationDefinition, StandardAggregationType } from '../east/aggregation';
import { ELARASchema } from '../schema/ELARASchema';
import { Grant } from '../admin/Grant';
import { VisualBase } from '../page/Visual';
/** @internal */
export declare type ViewPartitionValue = {
    partition: string | null;
    label: string | null;
};
/** @internal */
export declare function ViewPartitionValue(partition: string | null, label: string | null): ViewPartitionValue;
/** @internal */
export declare type ViewPartitionLabels = {
    type: "labels";
    partitioning: string;
    view: string;
    field_types: Record<string, EastType>;
};
/** @internal */
export declare type ViewPartitionRows = {
    type: "rows";
    partitioning: string;
    value?: ViewPartitionValue;
    view: string;
    field_types: Record<string, EastType>;
};
/** @internal */
export declare type ViewPartition = ViewPartitionLabels | ViewPartitionRows;
/** @internal */
export declare type View = {
    table: string;
    partition: ViewPartitionRows;
    primary_key: EastFunction<"string">;
    input_fields: Record<string, Variable>;
    fields: Record<string, Variable>;
    selections: Record<string, ViewSelection> | null;
    groups: Record<string, ViewGroup> | null;
    aggregations: Record<string, ViewAggregation> | null;
    filters: Record<string, ViewFilter> | null;
    load: Record<string, ViewLoad> | null;
} & VisualBase;
/**
 * Defines a {@link ViewDefinition} to view a {@link Table} in-memory in the UI, which can be visualised in one or more {@link Visual}'s.
 *
 * @category View
 */
export declare type ViewDefinition = {
    /** the name of the {@link ViewDefinition} */
    name: string;
    /** the icon of the {@link ViewDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the label of the {@link ViewDefinition} */
    label?: string;
    /** the {@link Table} to build the {@link ViewDefinition} from */
    table: Table | null;
    /** the {@link Partition}'s to build the {@link ViewDefinition} from */
    partition: Partition | null;
    /** set to true to output all input fields as {@link ViewSelection}s */
    keep_all?: boolean;
    /** a `Record` of the evaluated {@link Expression}'s */
    selections?: Record<string, ViewSelectionDefinition | EastFunction>;
    /** a `Record` of the {@link ViewGroupDefinition}'s to apply to group the data */
    groups?: Record<string, ViewGroupDefinition | EastFunction<PrimitiveType>>;
    /** a `Record` of the {@link ViewAggregationDefinition}'s to apply to within each group */
    aggregations?: Record<string, ViewAggregationDefinition | StandardAggregationDefinition<PrimitiveType | "set", StandardAggregationType>>;
    /** a `Record` of the {@link ViewFilterDefinition}'s to enable filtering of the {@link ViewDefinition} in the UI*/
    filters?: Record<string, ViewFilterDefinition>;
    /** a `Record` of the {@link ViewFilterDefinition}'s to facilitate loading different {@link Partition}'s in the UI*/
    load?: Record<string, ViewLoadDefinition | Partition>;
    /** the {@link Grant}'s to restrict access to the {@link ViewDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Create a {@link View} to of one or more {@link Expressions}'s of a {@link Table}.
 *
 * @param definition: the desired {@link ViewDefinition}.
 * @return a valid {@link View}
 *
 * @category View
 *
 * @example
 *  ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  //To create view to aggregate total sales per product per day of week, ordered by total sales and day of week.
 *  const user = View({
 *      name: "Sales Total",
 *      partition: table.partitions.all,
 *      table: table,
 *      groups: {
 *          "Product": ViewGroup({ value: table.fields.ProductTitle }),
 *          "Day of Week": ViewGroup({ value: DayName(table.fields.Date) }),
 *      },
 *      aggregations: {
 *          "Total Sales": ViewAggregation({ value: Sum(table.fields.Amount), dir: 'desc' }),
 *          "Day of Week Number": ViewAggregation({ value: Unique(DayOfWeek(table.fields.Date)), dir: 'desc' }),
 *      }
 *  })
 * ```
 */
export declare function View(config: ViewDefinition): ViewDefinition;
/** @internal */
export declare function toView(def: ViewDefinition): View;
/**
 * Create a {@link ELARASchema} containing a {@link View} of a {@link Table} in-memory in the UI, which can be visalised in one or more {@link Visual}'s
 *
 * @param definition: the desired {@link ViewDefinition}
 * @returns a valid {@link View} within a {@link ELARASchema}
 *
 * @category View
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  //To create view to aggregate total sales.
 *  const user = ViewSchema(
 *      View({
 *          name: "Sales Total",
 *          partition: table.partitions.all,
 *          table: table,
 *          aggregations: {
 *              "Total Sales": ViewAggregation({ value: Sum(table.fields.Amount), dir: 'desc' }),
 *          }
 *      })
 *  )
 * ```
 */
export declare function ViewSchema(def: ViewDefinition): ELARASchema;
/** @internal */
export declare type ViewLoad = {
    kind: 'view';
} & ViewPartitionRows & VisualBase;
/**
 * Defines a {@link ViewLoadDefinition} to enable loading of a {@link Partition} in a {@link Visual}'s'
 *
 * @category Partition
 */
export declare type ViewLoadDefinition = {
    /** the label of the {@link ViewLoadDefinition} */
    label?: string;
    /** the icon of the {@link ViewLoadDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link Partition} to load from the {@link ViewLoadDefinition} from */
    partition: Partition;
    /** the {@link Grant}'s to restrict access to the {@link ViewLoadDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Create a {@link ViewLoad} to enable loading of a {@link Partition} in a {@link Visual}'s'
 *
 * @param definition: the desired {@link ViewLoadDefinition}
 * @returns a valid {@link ViewLoad}
 *
 * @category Partition
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create the a loader to enable loading the sales partiioned by month, showing a custom icon and label
 *  const source = ViewLoad({
 *      label: "Sales Per Month"
 *      icon: 'calendar-range',
 *      partition: table.paritions.by_month,
 *  })
 * ```
 */
export declare function ViewLoad(config: ViewLoadDefinition): ViewLoadDefinition;
/** @internal */
export declare type ViewGroupValue<T extends PrimitiveType = PrimitiveType> = {
    value: EastFunction<T>;
    dir: 'asc' | 'desc';
};
/** @internal */
export declare function ViewGroupValue<T extends PrimitiveType = PrimitiveType>(value: EastFunction<T>, dir: 'asc' | 'desc'): {
    value: EastFunction<T>;
    dir: "asc" | "desc";
};
/** @internal */
export declare type ViewGroup<T extends PrimitiveType = PrimitiveType> = ViewGroupValue<T> & {
    field: Variable<T>;
    type: T;
    view: string;
} & VisualBase;
/**
 * Defines a {@link ViewGroupDefinition} to enable grouping a {@link View} by an {@link EastFunction}
 *
 * @category Grouping
 */
export declare type ViewGroupDefinition<T extends PrimitiveType = PrimitiveType> = {
    /** the label of the {@link ViewGroupDefinition} */
    label?: string;
    /** the icon of the {@link ViewGroupDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link EastFunction} that when evaluated defines the grouping */
    value: EastFunction<T>;
    /** the sort direction to apply to the resulting groups */
    dir?: 'asc' | 'desc';
    /** the {@link Grant}'s to restrict access to the {@link ViewGroupDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Create a {@link ViewGroup} to enable grouping a {@link View} by an {@link EastFunction}
 *
 * @param definition: the desired {@link ViewGroupDefinition}
 * @returns a valid {@link ViewGroup}
 *
 * @category Grouping
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create the a grouping of values per month, showing a custom icon and label
 *  const source =  ViewGroup({
 *      label: "Day of Week"
 *      icon: 'update',
 *      value: DayName(table.fields.Date)
 *  })
 * ```
 */
export declare function ViewGroup<T extends PrimitiveType = PrimitiveType>(config: ViewGroupDefinition<T>): ViewGroupDefinition<T>;
/** @internal */
export declare function toViewGroup<T extends PrimitiveType = PrimitiveType>(def: ViewGroupDefinition<T>, key: string, fields: Record<string, Variable>, view: string): ViewGroup<T>;
/** @internal */
export declare type ViewAggregationValue<T extends PrimitiveType | SetType = PrimitiveType | SetType> = {
    value: StandardAggregation<T>;
    dir?: 'asc' | 'desc';
};
/** @internal */
export declare function ViewAggregationValue<T extends PrimitiveType | SetType = PrimitiveType | SetType>(value: StandardAggregation<T>, dir?: 'asc' | 'desc'): {
    value: StandardAggregation<T, StandardAggregationType>;
    dir: "asc" | "desc" | undefined;
};
/** @internal */
export declare type ViewAggregation<T extends PrimitiveType | SetType = PrimitiveType | SetType> = ViewAggregationValue<T> & {
    field: Variable<T>;
    type: T;
    view: string;
} & VisualBase;
/**
 * Defines a {@link ViewAggregationDefinition} to enable aggregation a {@link View} by an {@link EastFunction} within {@link ViewGroup}'s
 *
 * @category Grouping
 */
export declare type ViewAggregationDefinition<T extends PrimitiveType | SetType = PrimitiveType | SetType> = {
    /** the label of the {@link ViewAggregationDefinition} */
    label?: string;
    /** the icon of the {@link ViewAggregationDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link EastFunction} that when evaluated defines the grouping */
    value: StandardAggregationDefinition<T>;
    /** the sort direction to apply to the resulting groups */
    dir?: 'asc' | 'desc';
    /** the {@link Grant}'s to restrict access to the {@link ViewAggregationDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Creates a {@link ViewAggregation} to enable aggregation a {@link View} by an {@link EastFunction} within {@link ViewGroup}'s
 *
 * @param definition: the desired {@link ViewAggregationDefinition}
 * @returns a valid {@link ViewAggregation}
 *
 * @category Grouping
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a sum of Amount value, showing a custom icon and label
 *  const source =  ViewAggregation({
 *      label: "Total Sales"
 *      icon: 'currency-usd',
 *      value: Sum(table.fields.Amount)
 *  })
 * ```
 */
export declare function ViewAggregation<T extends PrimitiveType | SetType = PrimitiveType | SetType>(config: ViewAggregationDefinition<T>): ViewAggregationDefinition<T>;
/** @internal */
export declare function toViewAggregation<T extends PrimitiveType | SetType = PrimitiveType | SetType>(def: ViewAggregationDefinition<T>, key: string, fields: Record<string, Variable>, primary_key: EastFunction<"string">, view: string): ViewAggregation<T>;
/** @internal */
export declare type ViewSelectionValue<T extends EastType = EastType> = {
    value: EastFunction<T>;
    dir: 'asc' | 'desc' | 'none';
};
/** @internal */
export declare function ViewSelectionValue<T extends EastType = EastType>(value: EastFunction<T>, dir: 'asc' | 'desc' | 'none'): {
    value: EastFunction<T>;
    dir: "asc" | "desc" | "none";
};
/** @internal */
export declare type ViewSelection<T extends EastType = EastType> = ViewSelectionValue<T> & {
    field: Variable<T>;
    view: string;
} & VisualBase;
/**
 * Defines a {@link ViewSelectionDefinition} to enable selecting a {@link View} by an {@link EastFunction}
 *
 * @category Selection
 */
export declare type ViewSelectionDefinition<T extends EastType = EastType> = {
    /** the label of the {@link ViewSelectionDefinition} */
    label?: string;
    /** the icon of the {@link ViewSelectionDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link EastFunction} to select */
    value: EastFunction<T>;
    /** the {@link Grant}'s to restrict access to the {@link ViewSelectionDefinition} in the UI */
    grants?: Grant[];
    /** the sort direction to apply to the resulting selection */
    dir?: 'asc' | 'desc' | 'none';
};
/**
 * Creates a {@link ViewSelection} to enable selecting a {@link View} by an {@link EastFunction}
 *
 * @param definition: the desired {@link ViewSelectionDefinition}
 * @returns a valid {@link ViewSelection}
 *
 * @category Selection
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create the selection of a new variable 'Tomorrow Day of Week'
 *  const source =  ViewSelection({
 *      label: "Tomorrow Day of Week"
 *      icon: 'update',
 *      value: DayName(
 *          AddDuration(table.fields.Date, 1, 'day')
 *      )
 *  })
 * ```
 */
export declare function ViewSelection<T extends EastType = EastType>(config: ViewSelectionDefinition<T>): ViewSelectionDefinition<T>;
/** @internal */
export declare function toViewSelection<T extends EastType = EastType>(def: ViewSelectionDefinition<T>, key: string, fields: Record<string, Variable>, view: string): ViewSelection<T>;
/**
 * Defines a {@link FilterType} of a {@link ViewFilterDefinition}.
 *
 * @category Filtering
 */
export declare type FilterType = 'string_range' | 'string_value' | 'boolean' | 'float' | 'integer' | 'datetime';
/**
 * Defines a {@link FilterTypeOf} of a {@link ViewFilterDefinition} based on a {@link PrimitiveType}.
 *
 * @category Filtering
 */
export declare function FilterTypeOf<T extends PrimitiveType = PrimitiveType>(type: T): "boolean" | "float" | "integer" | "datetime" | "string_value";
/**
 * Defines a {@link FilterValueType} type, based on {@link FilterType}.
 *
 * @category Filtering
 */
export declare type FilterValueType<T extends FilterType = FilterType> = T extends 'string_range' ? Set<string> | null | 'null' : T extends 'string_value' ? string | null | 'null' : T extends 'boolean' ? [true, false] | [true] | [false] | null | 'null' : T extends 'float' ? number | null | 'null' : T extends 'integer' ? bigint | null | 'null' : T extends 'datetime' ? [Date, Date] | [null, Date] | [Date, null] | null | 'null' : never;
/**
 * Defines a {@link FilterFunctionType} based on a {@link FilterType}.
 *
 * @category Filtering
 */
export declare type FilterFunctionType<T extends FilterType = FilterType> = T extends 'string_range' ? EastFunction<"set"> : T extends 'string_value' ? EastFunction<"string"> : T extends 'boolean' ? EastFunction<'boolean'> : T extends 'float' ? EastFunction<'float'> : T extends 'integer' ? EastFunction<'integer'> : T extends 'datetime' ? EastFunction<StructType<{
    min: 'datetime';
    max: 'datetime';
}>> : never;
/**
 * Defines a {@link FilterVariableType} of a {@link ViewFilterDefinition} based on a {@link PrimitiveType}.
 *
 * @category Filtering
 */
export declare type FilterVariableType<T extends FilterType = FilterType> = T extends 'string_range' ? Variable<"string"> : T extends 'string_value' ? Variable<"string"> : T extends 'boolean' ? Variable<'boolean'> : T extends 'float' ? Variable<'float'> : T extends 'integer' ? Variable<'integer'> : T extends 'datetime' ? Variable<'datetime'> : never;
/**
 * Defines a {@link FilterVariableEastType} based on a {@link FilterType}.
 *
 * @category Filtering
 */
export declare type FilterVariableEastType<T extends FilterType = FilterType> = T extends 'string_range' ? "string" : T extends 'string_value' ? "string" : T extends 'boolean' ? 'boolean' : T extends 'float' ? 'float' : T extends 'integer' ? 'integer' : T extends 'datetime' ? 'datetime' : never;
/**
 * Defines a {@link FilterOperationType} based on a {@link FilterType}.
 *
 * @category Filtering
 */
export declare type FilterOperationType<T extends FilterType = FilterType> = T extends 'string_range' ? 'Equal' | 'NotEqual' : T extends 'string_value' ? 'Equal' | 'NotEqual' | 'Contains' : T extends 'boolean' ? undefined : T extends 'float' ? 'LessEqual' | 'Less' | 'Greater' | 'GreaterEqual' | 'Equal' | 'NotEqual' : T extends 'integer' ? 'LessEqual' | 'Less' | 'Greater' | 'GreaterEqual' | 'Equal' | 'NotEqual' : T extends 'datetime' ? undefined : never;
/** @internal */
export declare type ViewFilterValue<T extends FilterType = FilterType> = {
    current: FilterValueType<T>;
    operation?: FilterOperationType<T>;
};
/** @internal */
export declare function ViewFilterValue<T extends FilterType = FilterType>(current: FilterValueType<T>, operation?: FilterOperationType<T>): {
    current: FilterValueType<T>;
    operation: FilterOperationType<T> | undefined;
};
/** @internal */
export declare type ViewFilter<T extends FilterType = FilterType> = {
    type: T;
    value: FilterVariableType<T>;
    current: FilterValueType<T>;
    operation?: FilterOperationType<T>;
    view: string;
} & VisualBase;
/**
 * Defines a {@link ViewFilterDefinition} to enable filtering a {@link View} by an {@link EastFunction}
 *
 * @category Filtering
 */
export declare type ViewFilterDefinition<T extends FilterType = FilterType> = {
    /** @internal */
    type: T;
    /** the label of the {@link ViewFilterDefinition} */
    label?: string;
    /** the icon of the {@link ViewFilterDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** false if the {@link ViewFilterDefinition} should be hidden in th UI */
    visible?: boolean;
    /** the {@link EastFunction} to filter */
    value: FilterVariableType<T>;
    /** the current filter {@link Value} */
    current?: FilterValueType<T>;
    /** the filtering {@link FilterOperationType} to apply */
    operation?: FilterOperationType<T>;
    /** the {@link Grant}'s to restrict access to the {@link ViewFilterDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Create a {@link StringValueFilter} to enable filtering a {@link View} by a string {@link Value}
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link StringValueFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a search on Name, applying the default icons
 *  const source =  StringValueFilter({
 *      label: 'Product Search"
 *      value: table.fields.Name
 *  })
 * ```
 */
export declare function StringValueFilter(config: Omit<ViewFilterDefinition<'string_value'>, 'type'>): ViewFilterDefinition<'string_value'>;
/**
 * Create a {@link StringRangeFilter} to enable filtering a {@link View} by a set of string {@link Value}'s
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link StringRangeFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a string selection by Category, applying the default icons
 *  const source =  StringRangeFilter({
 *      label: 'Product Category"
 *      value: table.fields.Category
 *  })
 * ```
 */
export declare function StringRangeFilter(config: Omit<ViewFilterDefinition<'string_range'>, 'type'>): ViewFilterDefinition<'string_range'>;
/**
 * Create a {@link BooleanFilter} to enable filtering a {@link View} by boolean {@link Value}'s
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link BooleanFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a boolean filter on Active, applying the default icons
 *  const source =  BooleanFilter({
 *      label: 'Product Active"
 *      value: table.fields.Active
 *  })
 * ```
 */
export declare function BooleanFilter(config: Omit<ViewFilterDefinition<'boolean'>, 'type'>): ViewFilterDefinition<'boolean'>;
/**
 * Create a {@link NumberFilter} to enable filtering a {@link View} by a number {@link Value}'s
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link NumberFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a number filter on Price, applying the default icons
 *  const source =  NumberFilter({
 *      label: 'Sale Price"
 *      value: table.fields.Price
 *  })
 * ```
 */
export declare function NumberFilter(config: Omit<ViewFilterDefinition<'float'>, 'type'>): ViewFilterDefinition<'float'>;
/**
 * Create a {@link IntegerFilter} to enable filtering a {@link View} by an integer {@link Value}'s
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link IntegerFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a integer filter on Qty, applying the default icons
 *  const source =  IntegerFilter({
 *      label: 'Sale Qty"
 *      value: table.fields.Qty
 *  })
 * ```
 */
export declare function IntegerFilter(config: Omit<ViewFilterDefinition<'integer'>, 'type'>): ViewFilterDefinition<'integer'>;
/**
 * Create a {@link DateTimeFilter} to enable filtering a {@link View} by date range {@link Value}'s
 *
 * @param definition: the desired {@link ViewFilterDefinition}
 * @returns a valid {@link DateTimeFilter}
 *
 * @category Filtering
 *
 * @example
 * ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  // create a date range filter on Date, applying the default icons
 *  const source =  DateTimeFilter({
 *      label: 'Sale Date"
 *      value: table.fields.Date
 *  })
 * ```
 */
export declare function DateTimeFilter(config: Omit<ViewFilterDefinition<'datetime'>, 'type'>): ViewFilterDefinition<'datetime'>;
