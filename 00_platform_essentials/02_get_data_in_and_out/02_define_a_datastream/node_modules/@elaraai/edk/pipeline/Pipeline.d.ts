// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Operation, OperationDefinition } from './Operation';
import { PartitionDefinition, Table } from '../data/Table';
import { ELARASchema } from '../schema/ELARASchema';
/** @internal */
export declare type Pipeline = {
    name: string;
    input_table: string;
    operations: readonly Operation[];
    output_table: Table;
    logging: boolean;
};
/**
 * Defines a {@link PipelineDefinition} of chained {@link Operation}'s to perform on an input {@link Table}.
 *
 * @category Pipeline
 */
export declare type PipelineDefinition = {
    /** the name of the {@link Pipeline} */
    name: string;
    /** the {@link Table} to perform the operations on */
    input_table: Table | null;
    /** the `Array` of chained {@link Operation}'s to perform on the input {@link Table}  */
    operations: OperationDefinition[];
    /** the {@link Partition}'s generated by the {@link Table} */
    partitions?: Record<string, PartitionDefinition>;
    /** a flag setting whether to create a {@link Table} for each operation's output - useful for debugging (default `false`) */
    operation_tables?: boolean;
};
/**
 * Create a {@link Pipeline} of chained {@link Operation}'s to perform on an input {@link Table}.
 *
 * @param definition: the desired {@link PipelineDefinition}
 * @returns a valid {@link PipelineDefinition}
 *
 * @category Pipeline
 *
 * @example
 * ```typescript
 *  // Create a Pipeline to aggregate costs into weekly totals per category.
 *  const pipeline = Pipeline({
 *      name: 'Weekly Costs',
 *      input_table: table,
 *      operations: [
 *        AggregateOperation({
 *            // create a group key
 *            group_field: Variable("Key", 'string'),
 *            // group by the start of the week
 *            group_value: StringJoin`WC${Floor(Variable('date', 'datetime'), "week")}`,
 *            aggregations: {
 *                // keep the date for each week
 *                week: Unique(Floor(Variable('date', 'datetime'), "week")),
 *                // collect the sum of costs per category in a `Dict`
 *                costs: CollectDictSum(
 *                    Variable("Category", 'string'),
 *                    Variable("Cost", 'integer')
 *                )
 *            }
 *        })
 *      ]
 *  })
 * ```
 */
export declare function Pipeline(def: PipelineDefinition): PipelineDefinition;
/** @internal */
export declare function toPipeline(def: PipelineDefinition): {
    pipeline: Pipeline;
    tables: Record<string, Table>;
};
/**
 *  Create a {@link ELARASchema} containing a {@link Pipeline} of chained {@link Operation}'s to perform on an input {@link Table}.
 *
 * @param definition: the desired {@link PipelineDefinition}
 * @returns a valid {@link PipelineDefinition} within a {@link ELARASchema}
 *
 * @category Pipeline
 *
 * @example
 * ```typescript
 *  // Create a Pipeline to aggregate costs into weekly totals per category.
 *  const pipeline = PipelineSchema({
 *      name: 'Weekly Costs',
 *      input_table: table,
 *      operations: [
 *        AggregateOperation({
 *            // create a group key
 *            group_field: Variable("Key", 'string'),
 *            // group by the start of the week
 *            group_value: StringJoin`WC${Floor(Variable('date', 'datetime'), "week")}`,
 *            aggregations: {
 *                // keep the date for each week
 *                week: Unique(Floor(Variable('date', 'datetime'), "week")),
 *                // collect the sum of costs per category in a `Dict`
 *                costs: CollectDictSum(
 *                    Variable("Category", 'string'),
 *                    Variable("Cost", 'integer')
 *                )
 *            }
 *        })
 *      ]
 *  })
 * ```
 */
export declare function PipelineSchema(def: PipelineDefinition): ELARASchema;
/**
 * A utility method to return the {@link Table}'s related to a {@link Pipeline}.
 *
 * @param pipeline: the {@link Pipeline} to return the {@link Table}'s of.
 * @param operations: include (true) or exclude (false) the {@link Table}'s for the {@link OperationDefinition}'s
 *
 * @returns The an `Array` of the {@link Table}'s
 *
 * @category Pipeline
 *
 * @example
 * ```typescript
 *  // get the Table's for a pipeline.
 *  const tables = pipelineTables(pipeline, true)
 * ```
 */
export declare function pipelineTables(pipeline: Pipeline, operations?: boolean): Record<string, Table>;
