// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { EastFunction, Variable } from '../east/functions';
import { Expression } from '../east/definition';
/** @internal */
export declare type Partition = {
    name: string;
    partition_key: EastFunction<"string"> | null;
    label: EastFunction<"string"> | null;
    dir: 'asc' | 'desc';
};
/**
 * A in-memory managed {@link PartitionDefinition} for a {@link Table}.
 *
 * @category Table
 */
export declare type PartitionDefinition = {
    /** the {@link EastFunction} to determine the partitions */
    partition_key?: EastFunction<"string"> | null;
    /** the {@link EastFunction} to determine the partition labels */
    label?: EastFunction<"string">;
    /** the sort direction to apply to the {@link PartitionDefinition.partition_key} */
    dir?: 'asc' | 'desc';
};
/**
 * Create a in-memory managed {@link Partition} for a {@link Table}.
 *
 * @param definition: the desired {@link PartitionDefinition}.
 * @return a valid {@link Partition}
 *
 * @category Table
 *
 * @example
 * ```typescript
 *  //To create a `Partition` of data per some integer category.
 *  const partition = Partition({
 *      partition_key: Variable('some_category', 'integer'),
 *      dir: 'dir',
 *      label: StringJoin`Cat: ${Variable('some_category', 'integer')}`,
 *  })
 * ```
 */
export declare function Partition(def?: PartitionDefinition): PartitionDefinition;
/**
 * Create a {@link Partition} per calendar day with human readable label
 *
 * @param value: the date {@link Expression}.
 * @return a valid {@link PartitionPerDay}
 *
 * @category Table
 *
 * @example
 * ```typescript
 *  //To create a `Partition` of data per some integer category.
 *  const partition = PartitionPerDay(Variable('some_date', 'datetime'))
 * ```
 */
export declare function PartitionPerDay(value: Expression<'datetime'>): PartitionDefinition;
/**
 * Create a {@link Partition} per calendar week with human readable label
 *
 * @param value: the date {@link Expression}.
 * @return a valid {@link PartitionPerWeek}
 *
 * @category Table
 *
 * @example
 * ```typescript
 *  //To create a `Partition` of data per some integer category.
 *  const partition = PartitionPerWeek(Variable('some_date', 'datetime'))
 * ```
 */
export declare function PartitionPerWeek(value: Expression<'datetime'>): PartitionDefinition;
/**
 * Create a {@link Partition} per calendar month with human readable label
 *
 * @param value: the date {@link Expression}.
 * @return a valid {@link PartitionPerMonth}
 *
 * @category Table
 *
 * @example
 * ```typescript
 *  //To create a Partition of data per some integer category.
 *  const partition = PartitionPerMonth(Variable('some_date', 'datetime'))
 * ```
 */
export declare function PartitionPerMonth(value: Expression<'datetime'>): PartitionDefinition;
/**
 * Create a {@link Partition} per calendar year with human readable label
 *
 * @param value: the date {@link Expression}.
 * @return a valid {@link PartitionPerYear}
 *
 * @category Table
 *
 * @example
 * ```typescript
 *  //To create a Partition of data per some integer category.
 *  const partition = PartitionPerYear(Variable('some_date', 'datetime'))
 * ```
 */
export declare function PartitionPerYear(value: Expression<'datetime'>): PartitionDefinition;
/** @internal */
export declare type Table = {
    name: string;
    hash: string;
    fields: Record<string, Variable>;
    primary_key: EastFunction<"string">;
    partitions: Record<string, Partition>;
    preserved?: boolean;
    logging: boolean;
};
/**
 * Defines a streaming {@link TableDefinition} to produce streaming {@link Expression} {@link Value}'s within {@link Partition}'s.
 *
 * @category Table
 */
export declare type TableDefinition = {
    /** the name of the {@link TableDefinition} */
    name: string;
    fields: Record<string, Variable>;
    /** the {@link Expression} key that evaluates to a unique value */
    primary_key?: EastFunction<"string">;
    /** the {@link Partition}'s generated by the {@link TableDefinition} */
    partitions?: Record<string, PartitionDefinition>;
    /** @internal */
    preserved?: boolean;
    /** @internal */
    logging?: boolean;
};
/**
 * Create a streaming {@link TableDefinition} to produce streaming {@link Expression} {@link Value}'s within {@link Partition}'s.
 *
 * @param definition: the desired {@link TableDefinition}
 * @returns a valid {@link Table}
 *
 * @category Table
 * @remarks It is not recommended to manually create a `Table` object, instead one should be created through other objects. For example, creating a `Pipeline` will create an output `Table`
 *
 * @example
 * ```typescript
 *  //To create a `Table` of some nested data containing among other things an object of type:
 *  const objectType = Variable('object', StructType({ count: 'integer', date: 'datetime' }))
 *  // create the table
 *  const table = Table({
 *      name: 'Nested Table',
 *      primary_key: Print(Variable('date', 'datetime')),
 *      fields: {
 *      // a date value
 *          date: Variable('date', 'datetime'),
 *          // an object containing a date and number
 *          object: Variable('object', objectType)
 *          // ... some other fields
 *          array: Variable('object', ArrayType(DictType('float')),
 *          // ...
 *      },
 *      partitions: {
 *          // partition the table by week
 *          'By Week': PartitionByWeek(Variable('date', 'datetime'))
 *          // partition the table by week, but by the date within the object
 *          'By Day': PartitionByDay(GetField(Variable('object', objectType), 'date'))
 *      }
 * })
 * ```
 */
export declare function Table(config: TableDefinition): TableDefinition;
/** @internal */
export declare function toTable(def: TableDefinition): Table;
