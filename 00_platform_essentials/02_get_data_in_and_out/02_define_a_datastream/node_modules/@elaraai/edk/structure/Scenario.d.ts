// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { ELARASchema } from "../schema/ELARASchema";
/** @internal */
export declare type Scenario = {
    name: string;
    parent: string | null;
};
/**
 * Create a seperate context for simulation and optimisation as a {@link Scenario}.
 *
 * @remark Each {@link Scenario} is able to depend on a parent {@link Scenario}, meaning that context will be inhertied form a parent {@link Scenario} unless explicitly overwritten
 *
 * @category Scenario
 */
export declare type ScenarioDefinition = {
    /** the name for the scenario */
    name: string;
    /** a parent {@link Scenario} to inherit into this one */
    parent?: Scenario;
};
/**
 * Create a seperate context for simulation and optimisation as a {@link Scenario}.
 *
 * @param definition: the desired {@link ScenarioDefinition}
 * @returns a valid {@link ScenarioDefinition}
 *
 * @remark Each {@link Scenario} is able to depend on a parent {@link Scenario}, meaning that context will be inhertied form a parent {@link Scenario} unless explicitly overwritten
 * @category Scenario
 *
 * @example
 * ```typescript
 * import baseline from "./gen/baseline.scenario"
 * //To create a Optimised `Scenario` based on a Baseline `Scenario`.
 * const scenario = Scenario({
 *   name: "Optimised",
 *   parent: baseline,
 * })
 * ```
 */
export declare function Scenario(prompt: ScenarioDefinition): ScenarioDefinition;
/**
 * Create a {@link ELARASchema} containing a seperate context for simulation and optimisation as a {@link Scenario}.
 *
 * @param definition: the desired {@link ScenarioDefinition}
 * @returns a valid {@link ScenarioDefinition} within a {@link ELARASchema}
 *
 * @remark Each {@link Scenario} is able to depend on a parent {@link Scenario}, meaning that context will be inhertied form a parent {@link Scenario} unless explicitly overwritten
 * @category Scenario
 *
 * @example
 * ```typescript
 * import baseline from "./gen/baseline.scenario"
 * //To create a Optimised `Scenario` based on a Baseline `Scenario`.
 * const scenario = ScenarioSchema({
 *   name: "Optimised",
 *   parent: baseline,
 * })
 * ```
 */
export declare function ScenarioSchema(def: ScenarioDefinition): ELARASchema;
