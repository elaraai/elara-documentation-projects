// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Table } from '../data/Table';
import { EastFunction } from '../east/functions';
import { ELARASchema } from '../schema/ELARASchema';
import { PropertyDefinition, PropertyInstance, PropertyMapping, PropertyStructure } from './Property';
/** @internal */
export declare type Resource = {
    type: "resource";
    properties: Record<string, PropertyInstance>;
};
/**
 * Create a single instance of an economic {@link Resource}. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Resource
 */
export declare type ResourceDefinition = {
    /** the `Record` of {@link PropertyDefinition} definitions related to the {@link Resource} */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
    };
};
/**
 * Create a single instance of an economic {@link Resource}. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link ResourceDefinition}
 * @returns a valid {@link ResourceDefinition}
 *
 * @category Resource
 *
 * @example
 * ```typescript
 * //To create an `Resource` called Bolt representing an Bolt with a price, and a time varying total cost sampled weekly.
 * const resource = Resource({
 *   properties: {
 *       Name: "Bolt",
 *       // the Bolt's price card as a dictionary
 *       Prices: NewDict('float', ['normal', 'special'],[12.5, 22.0]),
 *       // Bob's total pay over time
 *       TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *   }
 * })
 * ```
 */
export declare function Resource(def: ResourceDefinition): ResourceDefinition;
/** @internal */
export declare type ResourceMapping = {
    type: "resource";
    concept: string;
    marker: EastFunction<"string">;
    properties: Record<string, PropertyMapping>;
    input_table: string;
    filter?: EastFunction<"boolean">;
};
/**
 * Create a mapping of a {@link Table} to one or more  of an economic {@link Resource}'s'. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Resource
 */
export declare type ResourceMappingDefinition = {
    /** the string {@link EastFunction} representing the identity of the {@link Resource}  */
    marker?: EastFunction<"string">;
    /** the `Record` of {@link PropertyDefinition} definitions related to the {@link Resource} */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
    };
    /** the {@link Table} to base the {@link Resource}'s from' */
    input_table: Table;
    /** evaluate to false to exclude a {@link Resource} in the output */
    filter?: EastFunction<"boolean">;
};
/**
 * Create a mapping of a {@link Table} to one or more  of an economic {@link Resource}'s'. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link ResourceMappingDefinition}
 * @returns a valid {@link ResourceMappingDefinition}
 *
 * @category Resource
 *
 * @example
 * ```typescript
 * // get a pipeline with supply records
 * import supplies from "./gen/supplies.pipeline"
 * //To create `Resource`'s from a `Table` representing supplies with fixed price cards, and time varying total cost's sampled weekly.
 * const resource = ResourceMapping({
 *   // map each supply from the supplies pipeline output
 *   input_table: supplies.output_table,
 *   // filter out inactive supplies
 *   filter: Equal(supplies.fields.active, true),
 *   properties: {
 *       // Supply name
 *       Name: supplies.fields.name,
 *       // Supply price card as a dictionary
 *       Prices: employees.fields.price_card,
 *       // Supply's total cost over time
 *       TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *   }
 * })
 * ```
 */
export declare function ResourceMapping(def: ResourceMappingDefinition): ResourceMappingDefinition;
/** @internal */
export declare type ResourceStructure = {
    type: "resource";
    concept: string;
    marker?: string;
    properties: Record<string, PropertyStructure>;
    instances?: Record<string, Resource>;
    mapping?: ResourceMapping;
    instance_table: Table;
};
/**
 * Create an {@link ResourceStructureDefinition} structure element, with one or more {@link Resource}'s and an optional {@link ResourceMapping} resulting inone or more of an economic {@link Resource}'s'. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Resource
 */
export declare type ResourceStructureDefinition = {
    /** @internal */
    type: "resource";
    /** the type of {@link Resource} this {@link ResourceStructureDefinition} conceptually represents, such as 'Employee' */
    concept: string;
    /** a `Record` of one or more {@link ResourceDefinition} instances */
    instances?: Record<string, ResourceDefinition>;
    /** an {@link ResourceMapping} describing mapping from a {@link Table} */
    mapping?: ResourceMappingDefinition;
};
/**
 * Create an {@link ResourceStructureDefinition} structure element, with one or more {@link Resource}'s and an optional {@link ResourceMapping} resulting inone or more of an economic {@link Resource}'s'. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link ResourceStructureDefinition}
 * @returns a valid {@link ResourceStructureDefinition}
 *
 * @category Resource
 *
 * @example
 * ```typescript
 * // get a pipeline with supply records
 * import supplies from "./gen/supplies.pipeline"
 * // To create `Resource`'s both instances, and mapped from a `Table` representing supplies with fixed price cards, and time varying total cost's sampled weekly.
 * const resource = ResourceStructure({
 *   concept: "Supply",
 *   mapping: ResourceMapping({
 *      // map each supply from the supplies pipeline output
 *      input_table: supplies.output_table,
 *      // filter out inactive supplies
 *      filter: Equal(supplies.fields.active, true),
 *      properties: {
 *          // Supply name
 *          Name: supplies.fields.name,
 *          // Supply price card as a dictionary
 *          Prices: employees.fields.price_card,
 *          // Supply's total cost over time
 *          TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *      }
 *   }),
 *   instances: {
 *       Bolt: Resource({
 *           properties: {
 *              Name: "Bolt",
 *              // the Bolt's price card as a dictionary
 *              Prices: NewDict('float', ['normal', 'special'],[12.5, 22.0]),
 *              // Bob's total pay over time
 *              TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *           }
 *       })
 *   }
 * })
 * ```
 */
export declare function ResourceStructure(def: ResourceStructureDefinition): ResourceStructureDefinition;
/** @internal */
export declare function toResourceStructure(def: Omit<ResourceStructureDefinition, "type">): ResourceStructure;
/**
 * Create a {@link ELARASchema} containing an {@link ResourceStructureDefinition} structure element, with one or more {@link Resource}'s and an optional {@link ResourceMapping} resulting inone or more of an economic {@link Resource}'s'. An {@link Resource} is a participant in an activity within a business, an {@link Resource} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link ResourceStructureDefinition}
 * @returns a valid {@link ResourceStructureDefinition} within a {@link ELARASchema}
 *
 * @category Resource
 *
 * @example
 * ```typescript
 * // get a pipeline with supply records
 * import supplies from "./gen/supplies.pipeline"
 * // To create `Resource`'s both instances, and mapped from a `Table` representing supplies with fixed price cards, and time varying total cost's sampled weekly.
 * const resource = ResourceStructureSchema({
 *   concept: "Supply",
 *   mapping: ResourceMapping({
 *      // map each supply from the supplies pipeline output
 *      input_table: supplies.output_table,
 *      // filter out inactive supplies
 *      filter: Equal(supplies.fields.active, true),
 *      properties: {
 *          // Supply name
 *          Name: supplies.fields.name,
 *          // Supply price card as a dictionary
 *          Prices: employees.fields.price_card,
 *          // Supply's total cost over time
 *          TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *      }
 *   }),
 *   instances: {
 *       Bolt: Resource({
 *           properties: {
 *              Name: "Bolt",
 *              // the Bolt's price card as a dictionary
 *              Prices: NewDict('float', ['normal', 'special'],[12.5, 22.0]),
 *              // Bob's total pay over time
 *              TotalCost: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *           }
 *       })
 *   }
 * })
 * ```
 */
export declare function ResourceStructureSchema(def: Omit<ResourceStructureDefinition, "type">): ELARASchema;
