// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { DictType, EastType } from '../east/types';
import { EastFunction, Property } from '../east/functions';
/** @internal */
export declare type PropertyReference<T extends EastType = EastType> = {
    type: T;
    parent: string;
    concept: string;
    marker: string;
};
/** @internal */
export declare type PropertyReferenceMapping<T extends EastType = EastType> = {
    type: T;
    parent: string;
    concept: string;
    marker: EastFunction<"string">;
};
/** @internal */
export declare type PropertyReferenceStructure<T extends EastType = EastType> = {
    type: T;
    parent: string;
    concept: string;
};
/**
 * An {@link Expression} that returns the process date for the {@link Process} in context.
 *
 * @category Property
 */
export declare function ProcessDate(): Property<"datetime">;
/**
 * An {@link Expression} that returns the output marker for the {@link SingleEvent} in context.
 *
 * @category Property
*/
export declare function EventMarker(event: string): Property<"string">;
/**
 * An {@link Expression} that returns the output value for the {@link SingleEvent} in context.
 *
 * @category Property
 */
export declare function EventValue<T extends EastType>(event: string, type: T): Property<T>;
/**
 * An {@link Expression} that returns a dictionary of output values for the {@link MultiEvent} in context.
 *
 * @category Property
*/
export declare function EventValues<T extends EastType>(event: string, type: T): Property<T>;
/** @internal */
export declare function PreviousValue<T extends EastType>(type: T): Property<T>;
/** @internal */
export declare function PreviousValues<T extends EastType>(type: T): Property<DictType<T>>;
/** @internal */
export declare function toPropertyReference<T extends EastType>(parent: string, marker: string, property: Property<T>): PropertyReference<T>;
/** @internal */
export declare function toPropertyReferenceMapping<T extends EastType>(parent: string, marker: EastFunction<"string">, def: Property<T>): PropertyReferenceMapping<T>;
/** @internal */
export declare function toPropertyReferenceStructure<T extends EastType>(property: PropertyReference<T> | PropertyReferenceMapping<T>): PropertyReferenceStructure<T>;
