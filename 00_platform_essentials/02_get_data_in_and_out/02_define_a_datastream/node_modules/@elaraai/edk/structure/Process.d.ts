// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Table } from '../data/Table';
import { Expression } from '../east/definition';
import { EastFunction, Property, Variable } from '../east/functions';
import { DictType, EastType } from '../east/types';
import { ELARASchema } from '../schema/ELARASchema';
import { PropertyDefinition, PropertyInstance, PropertyMapping, PropertyStructure, SettablePropertyStructure, TemporalPropertyStructure } from './Property';
import { PropertyReference, PropertyReferenceMapping, PropertyReferenceStructure } from './PropertyReference';
/**
 * An event that modifies a single {@link TemporalProperty} at an instant of time.
 *
 * @category Process
 */
export declare type SingleEvent<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The kind of {@link Event} */
    kind: "single";
    /** Defines the `parent` and `concept` of the {@link TemporalProperty} that is modified */
    property: PropertyReferenceStructure<T>;
    /** The property containing the marker of the {@link TemporalProperty} that is modified */
    marker: PropertyInstance<"string">;
    /** The property containing the new value to assign */
    value: PropertyInstance<T>;
    /** A reference to the datetime for when the event occurs */
    date: Property<"datetime">;
    /** Whether this event is active or disabled during simulation */
    active: boolean;
};
/**
 * An event that modifies a set of {@link TemporalProperty}s at an instant of time.
 *
 * @category Process
 */
export declare type MultipleEvent<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The kind of {@link Event} */
    kind: "multiple";
    /** Defines the `parent` and `concept` of the {@link TemporalProperty} that is modified */
    property: PropertyReferenceStructure<T>;
    /** The property containing a dictionary from maker to the new value to assign */
    values: PropertyInstance<DictType<T>>;
    /** A reference to the datetime for when the event occurs */
    date: Property<"datetime">;
    /** Whether this event is active or disabled during simulation */
    active: boolean;
};
/**
 * Either a {@link SingleEvent} or {@link MultipleEvent}.
 *
 * @category Process
 */
export declare type Event<T extends EastType = EastType> = SingleEvent<T> | MultipleEvent<T>;
/** @internal */
export declare function toEvent<T extends EastType>(process: string, event: string, process_marker: string, def: EventDefinition<T>, local_properties: Record<string, PropertyReference>): Event<T>;
/**
 * A process instance that consists of a series of {@link Event}s that modify
 * {@link TemporalProperty}s of {@link Agent}s and {@link Resource}s in the simulation.
 *
 * Processes contain a `date` property as well as a set of user-defined properties to help
 * define the events and hold metadata about the process.
 *
 * @category Process
 */
export declare type Process = {
    /** Type of {@link Structure} */
    type: "process";
    /** The date corresponding to the process's {@link Event}s */
    date?: PropertyInstance<"datetime">;
    /** A record of {@link Property}s belonging to this process */
    properties: Record<string, PropertyInstance>;
    /** A record of {@link Event}s belonging to this process */
    events: Record<string, Event>;
};
/**
 * An object for defining a {@link Process}, which consist of a set of `events` occuring at
 * simultaneously at a given `date`, and a set of `properties` to help define the events and
 * holding metadata about the process.
 *
 * @category Process
 */
export declare type ProcessDefinition = {
    /** The date corresponding to the process's {@link Event}s */
    date?: PropertyDefinition<"datetime">;
    /** A record of definitions for {@link Property}s belonging to this process */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
        date?: never;
        __previous_value?: never;
        __previous_values?: never;
    };
    /** A record of definitions for {@link Events} belonging to this process */
    events: Record<string, EventDefinition>;
};
/**
 * Helper function for creating a {@link ProcessDefinition}.
 *
 * @category Process
 */
export declare function Process(def: ProcessDefinition): ProcessDefinition;
/**
 * Create an economic {@link Event} that modifies a single temporal property at an instance
 * of time.
 *
 * @category Process
 */
export declare type SingleEventDefinition<T extends EastType = EastType> = {
    /** The {@link TemporalPropertyStructure} for the property that is modified */
    property: TemporalPropertyStructure<T> | SettablePropertyStructure<T>;
    /** Gives the marker for the property that is modified (optional only if there is a single, known marker for that structure) */
    marker?: PropertyDefinition<"string">;
    /** Gives the new value to assign to the property */
    value: PropertyDefinition<T>;
    /** A reference to the datetime for when the event occurs */
    date?: Property<"datetime">;
    /** An {@link Expression} setting whether the event is active or disabled during simulation */
    active?: Expression<"boolean">;
};
/**
 * Create an economic {@link Event} that modifies a set of temporal properties at an
 * instance of time. The targeted properties all must belong to a single
 * {@link TemporalPropertyStructure}.
 *
 * @category Process
 */
export declare type MultipleEventDefinition<T extends EastType = EastType> = {
    /** The {@link TemporalPropertyStructure} for the property that is modified */
    property: TemporalPropertyStructure<T> | SettablePropertyStructure<T>;
    /** Gives a dictionary from marker of the {@link TemporalProperty} that is modified to the new value to assign to that property */
    values: PropertyDefinition<DictType<T>>;
    /** A reference to the datetime for when the event occurs */
    date?: Property<"datetime">;
    /** An {@link Expression} setting whether the event is active or disabled during simulation */
    active?: Expression<"boolean">;
};
/**
 * Either a {@link SingleEventDefinition} or a {@link MultipleEventDefinition}
 *
 * @category Process
 */
export declare type EventDefinition<T extends EastType = EastType> = SingleEventDefinition<T> | MultipleEventDefinition<T>;
/**
 * A mapping for creating {@link SingleEvent}s that modify a single {@link TemporalProperty} at an instant of time from rows of a {@link Table}.
 *
 * @category Process
 */
export declare type SingleEventMapping<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The kind of {@link EventMapping} */
    kind: "single";
    /** Defines the `parent` and `concept` of the {@link TemporalProperty} that is modified */
    property: PropertyReferenceStructure<T>;
    /** A mapping for the properties containing the marker of the {@link TemporalProperty} that is modified */
    marker: PropertyMapping<"string">;
    /** A mapping for the properties containing the new value to assign */
    value: PropertyMapping<T>;
    /** A reference to the datetime for when the event occurs */
    date: Property<"datetime">;
    /** An {@link EastFunction} returning whether this event is active or disabled during simulation */
    active: EastFunction<"boolean">;
};
/**
 * A mapping for creating {@link MultipleEvent}s that modify a set of {@link TemporalProperty}s at an instant of time from rows of a {@link Table}.
 *
 * @category Process
 */
export declare type MultipleEventMapping<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The kind of {@link EventMapping} */
    kind: "multiple";
    /** Defines the `parent` and `concept` of the {@link TemporalProperty} that is modified */
    property: PropertyReferenceStructure<T>;
    /** A mapping for the properties containing a dictionary from maker to the new value to assign */
    values: PropertyMapping<DictType<T>>;
    /** A reference to the datetime for when the event occurs */
    date: Property<"datetime">;
    /** An {@link EastFunction} returning whether this event is active or disabled during simulation */
    active: EastFunction<"boolean">;
};
/**
 * Either a {@link SingleEventMapping} or {@link MultipleEventMapping}.
 *
 * @category Process
 */
export declare type EventMapping<T extends EastType = EastType> = SingleEventMapping<T> | MultipleEventMapping<T>;
/** @internal */
export declare function toEventMapping<T extends EastType>(process: string, event: string, process_marker: EastFunction<"string">, def: EventDefinition<T>, fields: Record<string, Variable>, local_properties: Record<string, PropertyReferenceMapping>): EventMapping<T>;
/**
 * A process mapping that consists of a series of {@link EventMapping}s that create events
 * to modify {@link TemporalProperty}s of {@link Agent}s and {@link Resource}s in the
 * simulation.
 *
 * Processes contain a `date` property as well as a set of user-defined properties to help
 * define the events and hold metadata about the process.
 *
 * @category Process
 */
export declare type ProcessMapping = {
    /** Type of {@link Structure} */
    type: "process";
    /** Identifier of the {@link ProcessStructure} this is an instance of */
    concept: string;
    /** An {@link EastFunction} returning the unique identifier for this process */
    marker: EastFunction<"string">;
    /** A mapping to create the dates corresponding to the processes's {@link Event}s */
    date?: PropertyMapping<"datetime">;
    /** A record of {@link PropertyMapping}s to create properties belonging to this process */
    properties: Record<string, PropertyMapping>;
    /** A record of {@link EventMappings}s to create events belonging to this process */
    events: Record<string, EventMapping>;
    /** The {@link Table} used as input to this mapping */
    input_table: string;
    /** An {@link EastFunction} returning a filter predicate to apply to the rows prior to mapping */
    filter?: EastFunction<"boolean">;
};
/**
 * A definition for a process mapping that consists of a series of events
 * to modify {@link TemporalProperty}s of {@link Agent}s and {@link Resource}s in the
 * simulation.
 *
 * Processes contain a `date` property as well as a set of user-defined properties to help
 * define the events and hold metadata about the process.
 *
 * @category Process
 */
export declare type ProcessMappingDefinition = {
    /** An {@link EastFunction} returning the unique identifier for this process (defaults to `input_table.primary_key`) */
    marker?: EastFunction<"string">;
    /** The definition of the dates corresponding to the processes's {@link Event}s */
    date?: PropertyDefinition<"datetime">;
    /** A record of {@link PropertyDefinitions}s to create properties belonging to this process */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
        date?: never;
        __previous_value?: never;
        __previous_values?: never;
    };
    /** A record of {@link EventDefinition}s to create events belonging to this process */
    events: Record<string, EventDefinition>;
    /** The {@link Table} used as input to this mapping */
    input_table: Table;
    /** An {@link EastFunction} returning a filter predicate to apply to the rows prior to mapping */
    filter?: EastFunction<"boolean">;
};
/**
 * Helper function for creating a {@link ProcessMappingDefinition}.
 *
 * @category Process
 */
export declare function ProcessMapping(def: ProcessMappingDefinition): ProcessMappingDefinition;
/**
 * The structure describing {@link SingleEvent}s belong to a process, which modify a single
 * {@link TemporalProperty} at an instant of time.
 *
 * @category Process
 */
export declare type SingleEventStructure<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The identifier of the {@link ProcessStructure} that this event belongs to */
    process: string;
    /** The identifier of this event structure */
    event: string;
    /** The kind of {@link EventStructure} */
    kind: "single";
    /** Defines the `parent` and `concept` of the {@link TemporalProperty} that is modified */
    property: PropertyReferenceStructure<T>;
    /** Identifies the {@link TemporalPropertyStructure} of the properties that are modified */
    marker: PropertyStructure<"string">;
    /** The structure of the property containing the new value to assign */
    value: PropertyStructure<T>;
};
/**
 * The structure describing {@link MultipleEvent}s belonging to a process, which modify a
 * set {@link TemporalProperty}s at an instant of time.
 *
 * @category Process
 */
export declare type MultipleEventStructure<T extends EastType = EastType> = {
    /** The type of the {@link TemporalProperty} that is modified */
    type: T;
    /** The identifier of the {@link ProcessStructure} that this event belongs to */
    process: string;
    /** The identifier of this event structure */
    event: string;
    /** The kind of {@link EventStructure} */
    kind: "multiple";
    /** Identifies the {@link TemporalPropertyStructure} of the properties that are modified */
    property: PropertyReferenceStructure<T>;
    /** The structure of the property containing the new values to assign */
    values: PropertyStructure<DictType<T>>;
};
/**
 * Either a {@link SingleEventStructure} or {@link MultipleEventStructure}.
 *
 * @category Process
 */
export declare type EventStructure<T extends EastType = EastType> = SingleEventStructure<T> | MultipleEventStructure<T>;
/**
 * The structure for {@link Process}es that consists of a series of {@link Event}s that modify
 * {@link TemporalProperty}s of {@link Agent}s and {@link Resource}s in the simulation.
 *
 * Processes contain a `date` property as well as a set of user-defined properties to help
 * define the events and hold metadata about the process.
 *
 * @category Process
 */
export declare type ProcessStructure = {
    /** The {@link Structure} type */
    type: "process";
    /** The identifier of the process */
    concept: string;
    /** If there is exactly one instance belonging to this structure, its marker is recorded here */
    marker?: string;
    /** The structure of the date properties corresponding to the process's {@link Event}s */
    date?: PropertyStructure<"datetime">;
    /** A record of {@link PropertyStructure}s belonging to this process */
    properties: Record<string, PropertyStructure>;
    /** A record of {@link EventStructures}s belonging to this process */
    events: Record<string, EventStructure>;
    /** A record of {@link Process} instances, describing the processes directly */
    instances?: Record<string, Process>;
    /** A {@link ProcessMapping}, describing how to create the {@link Process}es from an input {@link Table} */
    mapping?: ProcessMapping;
    /** A {@link Table} containing fixed data about each {@link Process} instance (such as markers and the value of {@link ValueProperty}s)*/
    instance_table: Table;
};
/**
 * An object to provide the definition for a process.
 *
 * A {@link Process} consists of a series of {@link Event}s which modify the value of
 * {@link TemporalProperty}s belonging to {@link Agent}s and {@link Resource}s during the
 * simulation. Processes contain a `date` property as well as a set of user-defined
 * properties to help define the events and hold metadata about the process.
 *
 * Processes can be defined based on data in a {@link Table} using a mapping definition, or
 * else instance definitions must be provided directly.
 *
 * @category Process
 */
export declare type ProcessStructureDefinition = {
    /** @internal */
    type: "process";
    /** The identifier of the process */
    concept: string;
    /** A record of {@link ProcessDefinition}s, defining the processes directly */
    instances?: Record<string, ProcessDefinition>;
    /** A {@link ProcessMappingDefinition}, defining the processes from an input {@link Table} */
    mapping?: ProcessMappingDefinition;
};
/**
 * A helper function to define a {@link ProcessStructureDefinition}.
 *
 * @category Process
 */
export declare function ProcessStructure(def: Omit<ProcessStructureDefinition, 'type'>): ProcessStructureDefinition;
/** @internal */
export declare function toProcessStructure(def: Omit<ProcessStructureDefinition, 'type'>): ProcessStructure;
/**
 * Construct an `ELARASchema` object with a new {@link ProcessStructure} defined.
 *
 * Either a mapping definition or one or more instance definitions must be provided. The
 * structure common to all instances of the process will be inferred from these definitions.
 *
 * @param def The {@link ProcessStructureDefinition} defining the process
 * @returns An {@link ELARASchema} containing the process structure.
 *
 * @category Process
 */
export declare function ProcessStructureSchema(def: Omit<ProcessStructureDefinition, 'type'>): ELARASchema;
