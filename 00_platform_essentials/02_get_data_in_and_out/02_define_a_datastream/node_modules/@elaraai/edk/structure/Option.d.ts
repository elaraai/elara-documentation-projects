// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Table } from '../data/Table';
import { Expression } from '../east/definition';
import { EastFunction, Property, Variable } from '../east/functions';
import { EastType, ValueTypeOf } from '../east/types';
import { Scenario } from './Scenario';
/** @internal */
export declare type AutomaticOption<T extends EastType = EastType> = T extends "float" ? {
    min: number;
    max: number;
} : never;
/** @internal */
export declare type SensitivityOption<T extends EastType = EastType> = T extends "float" ? {
    min: EastFunction<"float">;
    max: EastFunction<"float">;
} : never;
/** @internal */
export declare type ManualOption<T extends EastType = EastType> = T extends "float" | "datetime" | "integer" ? {
    min: number;
    max: number;
} : T extends "string" | "set" ? {
    range: Set<string> | null;
} : {};
/** @internal */
export declare type OptionProperty<T extends EastType = EastType> = {
    type: T;
    kind: "option";
    value: string | null;
    objective?: EastFunction<"float">;
    date: Property<"datetime">;
    proposals?: Record<string, ValueTypeOf<T> | null>;
    automatic?: Record<string, AutomaticOption<T>>;
    sensitivity?: Record<string, SensitivityOption<T>>;
    manual?: Record<string, ManualOption<T>>;
};
/** @internal */
export declare type AutomaticOptionMapping<T extends EastType = EastType> = T extends "float" ? {
    min: EastFunction<"float">;
    max: EastFunction<"float">;
    active: EastFunction<"boolean">;
} : never;
/** @internal */
export declare type SensitivityOptionMapping<T extends EastType = EastType> = T extends "float" ? {
    min: EastFunction<"float">;
    max: EastFunction<"float">;
    active: EastFunction<"boolean">;
} : never;
/** @internal */
export declare type ManualOptionMapping<T extends EastType = EastType> = T extends "float" | "datetime" | "integer" ? {
    min: EastFunction<T>;
    max: EastFunction<T>;
    active: EastFunction<"boolean">;
} : T extends "string" | "set" ? {
    range: EastFunction<"set">;
    active: EastFunction<"boolean">;
} : {
    active: EastFunction<"boolean">;
};
/** @internal */
export declare type OptionPropertyMapping<T extends EastType = EastType> = {
    type: T;
    kind: "option";
    value: EastFunction<T>;
    objective?: EastFunction<"float">;
    date: Property<"datetime">;
    proposals?: Record<string, {
        value: EastFunction<T>;
        active: EastFunction<"boolean">;
    }>;
    automatic?: Record<string, AutomaticOptionMapping<T>>;
    sensitivity?: Record<string, SensitivityOptionMapping<T>>;
    manual?: Record<string, ManualOptionMapping<T>>;
};
/** @internal */
export declare type OptionPropertyStructure<T extends EastType = EastType> = {
    type: T;
    kind: "option";
    parent: string;
    concept: string;
    marker?: string;
    automatic?: string[];
    sensitivity?: string[];
    manual?: string[];
    proposal_table?: Table;
    proposal_request_table?: Table;
    request_table?: Table;
    result_table: Table;
    sensitivity_table?: Table;
    optimization_table?: Table;
};
/** @category Property */
export declare type AutomaticOptionConfig<T extends EastType = EastType> = T extends "float" ? {
    scenario: Scenario;
    min: Expression<"float">;
    max: Expression<"float">;
    active?: Expression<"boolean">;
} : never;
/** @category Property */
export declare type SensitivityOptionConfig<T extends EastType = EastType> = T extends "float" ? {
    scenario: Scenario;
    min: Expression<"float">;
    max: Expression<"float">;
    active?: Expression<"boolean">;
} : never;
/** @category Property */
export declare type ManualOptionConfig<T extends EastType = EastType> = T extends "float" | "datetime" | "integer" ? {
    scenario: Scenario;
    min?: Expression<T>;
    max?: Expression<T>;
    active?: Expression<"boolean">;
} : T extends "string" | "set" ? {
    scenario: Scenario;
    range?: Expression<"set">;
    active?: Expression<"boolean">;
} : {
    scenario: Scenario;
    active?: Expression<"boolean">;
};
/**
 * Create an "option" property whose value may vary under different scenarios. The value can
 * be controlled in various ways - such as by manual user control or automated optimization.
 *
 *  @category Property
 *
 */
export declare type OptionPropertyConfig<T extends EastType> = {
    /** @required default_value: the value of the property in the absence of any proposal */
    default_value: Expression<T>;
    /** @optional objective: an East expression giving the contribution of this property to the global objective function */
    objective?: Expression<"float">;
    /** A reference to the datetime for when the event occurs (defaults to `ProcessDate()`) */
    date?: Property<"datetime">;
    /** @optional proposals: an array of proposed values to apply to the property in specified scenarios */
    proposals?: {
        scenario: Scenario;
        value: Expression<T>;
        active?: Expression<"boolean">;
    }[];
    /** @optional automatic: an array defining scenarios where automatic optimization should occur for this property */
    automatic?: AutomaticOptionConfig<T>[];
    /** @optional automatic: an array defining scenarios where sensitivity analysis should occur for this property */
    sensitivity?: SensitivityOptionConfig<T>[];
    /** @optional manual: an array configuring manual control (via the UI) of the property value in specified scenarios */
    manual?: ManualOptionConfig<T>[];
};
/** @internal */
export declare type OptionPropertyDefinition<T extends EastType> = OptionPropertyConfig<T> & {
    type: T;
    kind: "option";
};
/**
 * Create an "option" property whose value may vary under different scenarios. The value can
 * be controlled in various ways - such as by manual user control or automated optimization.
 *
 * @param config: the definition of the {@link Option}
 * @return a valid {@link Option}
 *
 * @category Property
 *
 * @example
 * ```typescript
 *  const item = Resource({
 *      properties: {
 *          Name: "Widget",
 *          // The sale price of widgets could vary - this allows the end users to propose values
 *          // manually (in the UI), and observe how this affects the outcome of the simulation
 *          Price: Option({
 *              default_value: 4.25,
 *              manual: [{
 *                  scenario: manual_scenario,
 *                  min: 1.0,
 *                  max: 10.0
 *              }]
 *          }),
 *          // ... other properties
 *      }
 * })
 * ```
 */
export declare function Option<T extends EastType>(config: OptionPropertyConfig<T>): OptionPropertyDefinition<T>;
/** @internal */
export declare function toAutomaticOption<T extends EastType>(def: AutomaticOptionConfig<T>): AutomaticOption<T>;
/** @internal */
export declare function toAutomaticOptionMapping<T extends EastType>(def: AutomaticOptionConfig<T>, fields: Record<string, Variable>): AutomaticOptionMapping<T>;
/** @internal */
export declare function toSensitivityOption<T extends EastType>(concept: string, type: T, def: SensitivityOptionConfig<T>): SensitivityOption<T>;
/** @internal */
export declare function toSensitivityOptionMapping<T extends EastType>(concept: string, type: T, def: SensitivityOptionConfig<T>, fields: Record<string, Variable>): SensitivityOptionMapping<T>;
/** @internal */
export declare function toManualOption<T extends EastType>(type: T, def: ManualOptionConfig<T>): ManualOption<T>;
/** @internal */
export declare function toManualOptionMapping<T extends EastType>(type: T, def: ManualOptionConfig<T>, fields: Record<string, Variable>): ManualOptionMapping<T>;
