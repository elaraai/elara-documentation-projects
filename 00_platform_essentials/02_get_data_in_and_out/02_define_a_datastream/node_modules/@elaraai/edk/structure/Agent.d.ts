// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Table } from '../data/Table';
import { EastFunction } from '../east/functions';
import { ELARASchema } from '../schema/ELARASchema';
import { PropertyDefinition, PropertyInstance, PropertyMapping, PropertyStructure } from './Property';
/** @internal */
export declare type Agent = {
    type: "agent";
    properties: Record<string, PropertyInstance>;
};
/**
 * Create a single instance of an economic {@link Agent}. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Agent
 */
export declare type AgentDefinition = {
    /** the `Record` of {@link PropertyDefinition} definitions related to the {@link Agent} */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
    };
};
/**
 * Create a single instance of an economic {@link Agent}. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link AgentDefinition}
 * @returns a valid {@link AgentDefinition}
 *
 * @category Agent
 *
 * @example
 * ```typescript
 * //To create an `Agent` called Bob representing an Employee with fixed hourly rate card, and a time varying total pay sampled weekly.
 * const agent = Agent({
 *   properties: {
 *       Name: "Bob",
 *       // Bob's pay rate card as a dictionary
 *       PayRates: NewDict('float', ['normal', 'overtime'],[23.5, 34.0]),
 *       // Bob's total pay over time
 *       TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *   }
 * })
 * ```
 */
export declare function Agent(def: AgentDefinition): AgentDefinition;
/** @internal */
export declare type AgentMapping = {
    type: "agent";
    concept: string;
    marker: EastFunction<"string">;
    properties: Record<string, PropertyMapping>;
    input_table: string;
    filter?: EastFunction<"boolean">;
};
/**
 * Create a mapping of a {@link Table} to one or more  of an economic {@link Agent}'s'. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Agent
 */
export declare type AgentMappingDefinition = {
    /** the string {@link EastFunction} representing the identity of the {@link Agent}  */
    marker?: EastFunction<"string">;
    /** the `Record` of {@link PropertyDefinition} definitions related to the {@link Agent} */
    properties?: Record<string, PropertyDefinition> & {
        marker?: never;
    };
    /** the {@link Table} to base the {@link Agent}'s from' */
    input_table: Table;
    /** evaluate to false to exclude a {@link Agent} in the output */
    filter?: EastFunction<"boolean">;
};
/**
 * Create a mapping of a {@link Table} to one or more  of an economic {@link Agent}'s'. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link AgentMappingDefinition}
 * @returns a valid {@link AgentMappingDefinition}
 *
 * @category Agent
 *
 * @example
 * ```typescript
 * // get a pipeline with employee records
 * import employees from "./gen/employee.pipeline"
 * //To create `Agent`'s from a `Table` representing, an Employees with fixed hourly rate cards, and time varying total pay's sampled weekly.
 * const agent = AgentMapping({
 *   // map each employee from the employees pipeline output
 *   input_table: employees.output_table,
 *   // filter out inactive employees
 *   filter: Equal(employees.fields.active, true),
 *   properties: {
 *       // Employees name
 *       Name: employees.fields.name,
 *       // Employees pay rate card as a dictionary
 *       PayRates: employees.fields.rate_card,
 *       // Employee's total pay over time
 *       TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *   }
 * })
 * ```
 */
export declare function AgentMapping(def: AgentMappingDefinition): AgentMappingDefinition;
/** @internal */
export declare type AgentStructure = {
    type: "agent";
    concept: string;
    marker?: string;
    properties: Record<string, PropertyStructure>;
    instances?: Record<string, Agent>;
    mapping?: AgentMapping;
    instance_table: Table;
};
/**
 * Create an {@link AgentStructureDefinition} structure element, with one or more {@link Agent}'s and an optional {@link AgentMapping} resulting inone or more of an economic {@link Agent}'s'. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @category Agent
 */
export declare type AgentStructureDefinition = {
    /** @internal */
    type: "agent";
    /** the type of {@link Agent} this {@link AgentStructureDefinition} conceptually represents, such as 'Employee' */
    concept: string;
    /** a `Record` of one or more {@link AgentDefinition} instances */
    instances?: Record<string, AgentDefinition>;
    /** an {@link AgentMapping} describing mapping from a {@link Table} */
    mapping?: AgentMappingDefinition;
};
/**
 * Create an {@link AgentStructureDefinition} structure element, with one or more {@link Agent}'s and an optional {@link AgentMapping} resulting inone or more of an economic {@link Agent}'s'. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link AgentStructureDefinition}
 * @returns a valid {@link AgentStructureDefinition}
 *
 * @category Agent
 *
 * @example
 * ```typescript
 * // Get a pipeline with employee records
 * import employees from "./gen/employee.pipeline"
 * // To create `Agent`'s both instances, and mapped from a `Table` representing an Employees with fixed hourly rate cards, and time varying total pay's sampled weekly.
 * const agent = AgentStructure({
 *   concept: "Employee",
 *   mapping: AgentMapping({
 *       // map each employee from the employees pipeline output
 *       input_table: employees.output_table,
 *       // filter out inactive employees
 *       filter: Equal(employees.fields.active, true),
 *       properties: {
 *           // Employees name
 *           Name: employees.fields.name,
 *           // Employees pay rate card as a dictionary
 *           PayRates: employees.fields.rate_card,
 *           // Employee's total pay over time
 *           TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *       }
 *   }),
 *   instances: {
 *       Bob: Agent({
 *           properties: {
 *               Name: "Bob",
 *               // Bob's pay rate card as a dictionary
 *               PayRates: NewDict('float', ['normal', 'overtime'],[23.5, 34.0]),
 *               // Bob's total pay over time
 *               TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *           }
 *       })
 *   }
 * })
 * ```
 */
export declare function AgentStructure(def: Omit<AgentStructureDefinition, 'type'>): AgentStructureDefinition;
/**
 * Create a {@link ELARASchema} containing an {@link AgentStructureDefinition} structure element, with one or more {@link Agent}'s and an optional {@link AgentMapping} resulting inone or more of an economic {@link Agent}'s'. An {@link Agent} is a participant in an activity within a business, an {@link Agent} may have one or more {@link PropertyDefinition} associated with them.
 *
 * @param definition: the desired {@link AgentStructureDefinition}
 * @returns a valid {@link AgentStructureDefinition} within a {@link ELARASchema}
 *
 * @category Agent
 *
 * @example
 * ```typescript
 * // Get a pipeline with employee records
 * import employees from "./gen/employee.pipeline"
 * // To create `Agent`'s both instances, and mapped from a `Table` representing an Employees with fixed hourly rate cards, and time varying total pay's sampled weekly.
 * const agent = AgentStructureSchema({
 *   concept: "Employee",
 *   mapping: AgentMapping({
 *       // map each employee from the employees pipeline output
 *       input_table: employees.output_table,
 *       // filter out inactive employees
 *       filter: Equal(employees.fields.active, true),
 *       properties: {
 *           // Employees name
 *           Name: employees.fields.name,
 *           // Employees pay rate card as a dictionary
 *           PayRates: employees.fields.rate_card,
 *           // Employee's total pay over time
 *           TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *       }
 *   }),
 *   instances: {
 *       Bob: Agent({
 *           properties: {
 *               Name: "Bob",
 *               // Bob's pay rate card as a dictionary
 *               PayRates: NewDict('float', ['normal', 'overtime'],[23.5, 34.0]),
 *               // Bob's total pay over time
 *               TotalPay: Temporal({ initial_value: 0, sampling_unit: 'week' }),
 *           }
 *       })
 *   }
 * })
 * ```
 */
export declare function AgentStructureSchema(def: Omit<AgentStructureDefinition, "type">): ELARASchema;
