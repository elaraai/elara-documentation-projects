// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Grant } from '../admin/Grant';
import { NumericType, PrimitiveType } from '../east/types';
import { ELARASchema } from '../schema/ELARASchema';
import { Annotation, GroupAnnotationDefinition, RowAnnotationDefinition } from './Annotation';
import { AxisTypeOf, Layout } from './Axis';
import { ContinuousType, GroupAreaSeries, GroupAreaSeriesDefinition, GroupBarSeries, GroupBarSeriesDefinition, GroupColumnSeries, GroupColumnSeriesDefinition, GroupCombinedSeries, GroupCombinedSeriesDefinition, GroupFlowSeries, GroupFlowSeriesDefinition, GroupHeatMapSeries, GroupHeatMapSeriesDefinition, GroupHTMLSeries, GroupHTMLSeriesDefinition, GroupKPISeries, GroupKPISeriesDefinition, GroupLineSeries, GroupLineSeriesDefinition, GroupPieSeries, GroupPieSeriesDefinition, GroupPivotSeries, GroupPivotSeriesDefinition, GroupRangeSeries, GroupRangeSeriesDefinition, GroupRidgelineSeries, GroupRidgelineSeriesDefinition, GroupScatterSeries, GroupScatterSeriesDefinition, GroupTableSeries, GroupTableSeriesDefinition, GroupTreeMapSeries, GroupTreeMapSeriesDefinition, RowAreaSeries, RowAreaSeriesDefinition, RowDistributionSeries, RowDistributionSeriesDefinition, RowFormSeries, RowFormSeriesDefinition, RowGeoSeries, RowGeoSeriesDefinition, RowHexbinSeries, RowHexbinSeriesDefinition, RowHTMLSeries, RowHTMLSeriesDefinition, RowLineSeries, RowLineSeriesDefinition, RowListSeries, RowListSeriesDefinition, RowMarginalSeries, RowMarginalSeriesDefinition, RowPivotSeries, RowPivotSeriesDefinition, RowRidgelineSeries, RowRidgelineSeriesDefinition, RowScatterSeries, RowScatterSeriesDefinition, RowTableSeries, RowTableSeriesDefinition, RowTimelineSeries, RowTimelineSeriesDefinition, RowTreeSeries, RowTreeSeriesDefinition } from './Series';
/** @internal */
export declare type VisualBase = {
    name: string;
    subtitle?: string;
    label: string | null;
    icon: string | null;
    grants: Grant[];
};
/** @internal */
export declare type Offset = {
    left: number;
    right: number;
    top: number;
    bottom: number;
};
/**
 * A visual type.
 *
 * @category Visual
 */
export declare type VisualType = 'group_html' | 'group_flow' | 'group_heatmap' | 'group_pie' | 'group_bar' | 'group_range' | 'group_column' | 'group_combined' | 'group_area' | 'group_ridgeline' | 'group_line' | 'group_scatter' | 'group_treemap' | 'group_table' | 'group_pivot' | 'row_table' | 'row_list' | 'row_tree' | 'row_form' | 'row_slider' | 'row_checklist' | 'row_html' | 'row_ridgeline' | 'row_timeline' | 'row_geo' | 'row_line' | 'row_pivot' | 'row_area' | 'row_scatter' | 'row_marginal' | 'row_distribution' | 'row_hexbin';
/**
 * Create a visual {@link Offset} in pixels.
 *
 * @param left: left hand offset in pixels
 * @param right: right hand offset in pixels
 * @param top: top offset in pixels
 * @param bottom: bottom offset in pixels
 * @returns a valid {@link Offset}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // create an offset
 *  const offset =  Offset(10, 10, 20, 30)
 * ```
 */
export declare function Offset(config?: Partial<Offset>): {
    left: number;
    right: number;
    top: number;
    bottom: number;
};
/** @internal */
export declare type VisualSize = {
    height: number;
    width: number;
};
/**
 * Create a visual {@link VisualSize} in pixels.
 *
 * @param height: the height in pixels
 * @param width: the width in pixels
 * @returns a valid {@link VisualSize}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // create an size
 *  const size =  VisualSize(150, 175)
 * ```
 */
export declare function VisualSize(height: number, width: number): {
    height: number;
    width: number;
};
/** @internal */
export declare type VisualPosition = {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
};
/**
 * Create a visual {@link VisualPosition} in pixels.
 *
 * @param position: the position points [x1, y1, x2, y2]
 * @returns a valid {@link VisualPosition}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // create a position
 *  const position =  VisualPosition([150, 175, 225, 100])
 * ```
 */
export declare function VisualPosition(position: [x1: number, y1: number, x2: number, y2: number]): {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
};
/** @internal */
export declare type VisualPoint = {
    x: number;
    y: number;
};
/**
 * Create a visual {@link VisualPoint} in pixels.
 *
 * @param point: the point [x, y]
 * @returns a valid {@link VisualPoint}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // create a position
 *  const position =  VisualPoint([150, 175])
 * ```
 */
export declare function VisualPoint(value: [number, number]): {
    x: number;
    y: number;
};
/**
 * A curve type within a visual, see {@link http://bl.ocks.org/d3indepth/b6d4845973089bc1012dec1674d3aff8}.
 *
 * @category Visual
 */
export declare type Curve = 'basis' | 'linear' | 'step' | 'step_after' | 'step_before';
/** @internal */
export declare type GroupHTMLVisual = {
    type: 'group_html';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupHTMLSeries;
    layout: null;
    notes: null;
};
/** @internal */
export declare function isGroupHTMLVisual(config: Visual): config is GroupHTMLVisual;
/**
 * Defines a {@link GroupHTMLVisualDefinition} to display string {@link View} content as a text area.
 *
 * @category Visual
 */
export declare type GroupHTMLVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'group_html';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupHTMLSeriesDefinition} describing the data series */
    series: GroupHTMLSeriesDefinition | null;
};
/**
 * Create a {@link GroupHTMLVisual} to display string {@link View} content as a text area.
 *
 * @param definition: the desired {@link GroupHTMLVisualDefinition}
 * @returns a valid {@link GroupHTMLVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import total_view from "./gen/total.view"
 *
 *  // create an inline text element
 *  const visual =  GroupHTMLVisual({
 *      series: GroupHTMLSeries({
 *          view: bills_total,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupHTMLVisual(config: Omit<GroupHTMLVisualDefinition, 'kind' | 'type' | 'notes' | 'annotation' | 'layout'>): GroupHTMLVisualDefinition;
/** @internal */
export declare type GroupFlowVisual<Z extends NumericType = NumericType> = {
    type: 'group_flow';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupFlowSeries<Z>;
    annotation: Record<string, Annotation<'string', 'string'>> | null;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupFlowVisual(config: GroupVisual): config is GroupFlowVisual;
/**
 * Defines a {@link GroupFlowVisualDefinition} to display a network diagram (Sankey) from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupFlowVisualDefinition<Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_flow';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupFlowSeriesDefinition} to display */
    series: GroupFlowSeriesDefinition<Z> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupFlowVisual} to display a network diagram (Sankey) from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupFlowVisualDefinition}
 * @returns a valid {@link GroupFlowVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create snakey chart
 *  const visual = GroupFlowVisual({
 *      series: GroupFlowSeries({
 *          view: group_view,
 *          x: GroupFlowInput({
 *              prev: group_view.aggregations.PreviousCategory,
 *              curr: group_view.aggregations.Category
 *          }),
 *          y: GroupFlowInput({
 *              prev: group_view.aggregations.PreviousProduct,
 *              curr: group_view.aggregations.Product
 *          }),
 *              value: group_view.aggregations.Total,
 *              color: GroupLinearColor(group_view.aggregations.Total)
 *          }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupFlowVisual<Z extends NumericType = NumericType>(config: Omit<GroupFlowVisualDefinition<Z>, 'kind' | 'type'>): GroupFlowVisualDefinition;
/** @internal */
export declare type GroupHeatMapVisual<Z extends ContinuousType = ContinuousType> = {
    type: 'group_heatmap';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupHeatMapSeries<Z>;
    annotation: Record<string, Annotation<'string', 'string'>> | null;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupHeatMapVisual(config: GroupVisual): config is GroupHeatMapVisual;
/**
 * Defines a {@link GroupHeatMapVisualDefinition} to display the magnitude of a variable as color in two dimensions from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupHeatMapVisualDefinition<Z extends ContinuousType = ContinuousType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_heatmap';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupHeatMapSeriesDefinition} to display */
    series: GroupHeatMapSeriesDefinition<Z> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupHeatMapVisual} to display the magnitude of a variable as color in two dimensions from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupHeatMapVisualDefinition}
 * @returns a valid {@link GroupHeatMapVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a heatmap visual
 *  const visual = GroupHeatMapVisual({
 *      series: GroupHeatMapSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Category,
 *          value: group_view.aggregations.Total,
 *          color: GroupLinearColor(group_view.aggregations.Total)
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupHeatMapVisual<Z extends ContinuousType = ContinuousType>(config: Omit<GroupHeatMapVisualDefinition<Z>, 'kind' | 'type'>): GroupHeatMapVisualDefinition<Z>;
/** @internal */
export declare type GroupPieVisual<Z extends NumericType = NumericType> = {
    type: 'group_pie';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupPieSeries<Z>;
    layout: Layout<null, null>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupPieVisual(config: GroupVisual): config is GroupPieVisual;
/**
 * Defines a {@link GroupPieVisualDefinition} to display a pie chart, where the arc length of each slice, is proportional to the quantity it represents from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupPieVisualDefinition<Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_pie';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupPieSeriesDefinition} to display */
    series: GroupPieSeriesDefinition<Z> | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<null, null>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupPieVisual} to display a pie chart, where the arc length of each slice, is proportional to the quantity it represents from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupPieVisualDefinition}
 * @returns a valid {@link GroupPieVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a pie chart
 *  const visual = GroupPieVisual({
 *      series: GroupPieSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          value: group_view.aggregations.Total,
 *          color: GroupOrdinalColor(group_view.aggregations.Product),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupPieVisual<Z extends NumericType = NumericType>(config: Omit<GroupPieVisualDefinition<Z>, 'kind' | 'type'>): GroupPieVisualDefinition<Z>;
/** @internal */
export declare type GroupBarVisual<X extends NumericType = NumericType> = {
    type: 'group_bar';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupBarSeries<X>;
    annotation: Record<string, Annotation<X, 'string'>> | null;
    layout: Layout<AxisTypeOf<X>, 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupBarVisual(config: GroupVisual): config is GroupBarVisual;
/**
 * Defines a {@link GroupBarVisualDefinition} to display a bar chart, presenting categorical data with rectangular bars with lengths proportional to the values that they represent from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupBarVisualDefinition<X extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_bar';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupBarSeriesDefinition} to display */
    series: GroupBarSeriesDefinition<X> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<X, 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupBarVisual} to display a bar chart, presenting categorical data with rectangular bars with lengths proportional to the values that they represent from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupBarVisualDefinition}
 * @returns a valid {@link GroupBarVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a bar chart
 *  const visual = GroupBarVisual({
 *      series: GroupBarStackedSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Total,
 *          y: group_view.aggregations.Product,
 *          key: group_view.aggregations.Category,
 *          color: GroupOrdinalColor(group_view.aggregations.Category),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupBarVisual<X extends NumericType = NumericType>(config: Omit<GroupBarVisualDefinition<X>, 'kind' | 'type'>): GroupBarVisualDefinition<X>;
/** @internal */
export declare type GroupCombinedVisual<Y extends NumericType = NumericType> = {
    type: 'group_combined';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupCombinedSeries<Y>;
    annotation: Record<string, Annotation<'string', Y>> | null;
    layout: Layout<'string', AxisTypeOf<Y>>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupCombinedVisual(config: GroupVisual): config is GroupCombinedVisual;
/**
 * Defines a {@link GroupCombinedVisualDefinition} to display a combined chart, presenting categorical data with rectangular combineds with lengths proportional to the values that they represent from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupCombinedVisualDefinition<Y extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_combined';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupCombinedSeriesDefinition} to display */
    series: GroupCombinedSeriesDefinition<Y> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', Y>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', AxisTypeOf<Y>>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupCombinedVisual} to display a combined chart, presenting categorical data with rectangular combineds with lengths proportional to the values that they represent from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupCombinedVisualDefinition}
 * @returns a valid {@link GroupCombinedVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a combined chart
 *  const visual = GroupCombinedVisual({
 *      series: GroupCombinedValueSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          line: GroupCombinedSeriesLine({
 *              y: group_view.aggregations.Ratio,
 *              color: ColorValue()
 *          }),
 *          column: GroupCombinedSeriesColumn({
 *              y: group_view.aggregations.Total,
 *              color: ColorValue()
 *          }),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupCombinedVisual<Y extends NumericType = NumericType>(config: Omit<GroupCombinedVisualDefinition<Y>, 'kind' | 'type'>): GroupCombinedVisualDefinition<Y>;
/** @internal */
export declare type GroupRangeVisual<X extends NumericType = NumericType> = {
    type: 'group_range';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupRangeSeries<X>;
    annotation: Record<string, Annotation<X, 'string'>> | null;
    layout: Layout<AxisTypeOf<X>, 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupRangeVisual(config: GroupVisual): config is GroupRangeVisual;
/**
 * Defines a {@link GroupRangeVisualDefinition} to display a range chart, presenting categorical data with rectangular bars with widths and offsets proportional to the values that they represent from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupRangeVisualDefinition<X extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_range';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupRangeSeriesDefinition} to display */
    series: GroupRangeSeriesDefinition<X> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<X, 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupRangeVisual} to display a range chart, presenting categorical data with rectangular bars with widths and offsets proportional to the values that they represent from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupRangeVisualDefinition}
 * @returns a valid {@link GroupRangeVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create range chart
 *  const visual = GroupRangeVisual({
 *      series: GroupRangeSeries({
 *          view: group_view,
 *          x1: group_view.aggregations.Min,
 *          x2: group_view.aggregations.Max,
 *          x_mid: group_view.aggregations.Avg,
 *          y: group_view.aggregations.Category,
 *          color: GroupLinearColor(group_view.aggregations.Total),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupRangeVisual<X extends NumericType = NumericType>(config: Omit<GroupRangeVisualDefinition<X>, 'kind' | 'type'>): GroupRangeVisualDefinition<X>;
/** @internal */
export declare type GroupColumnVisual<Y extends NumericType = NumericType> = {
    type: 'group_column';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupColumnSeries<Y>;
    annotation: Record<string, Annotation<'string', Y>> | null;
    layout: Layout<'string', AxisTypeOf<Y>>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupColumnVisual(config: GroupVisual): config is GroupColumnVisual;
/**
 * Defines a {@link GroupColumnVisualDefinition} to display a column chart, presenting categorical data with rectangular bars with heights proportional to the values that they represent from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupColumnVisualDefinition<Y extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_column';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupColumnSeriesDefinition} to display */
    series: GroupColumnSeriesDefinition<Y> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', Y>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', AxisTypeOf<Y>>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupColumnVisual} to display a column chart, presenting categorical data with rectangular bars with heights proportional to the values that they represent from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupColumnVisualDefinition}
 * @returns a valid {@link GroupColumnVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create column chart
 *  const visual = GroupColumnVisual({
 *      series: GroupColumnValueSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Total,
 *          color: GroupOrdinalColor(group_view.aggregations.Product),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupColumnVisual<Y extends NumericType = NumericType>(config: Omit<GroupColumnVisualDefinition<Y>, 'kind' | 'type'>): GroupColumnVisualDefinition<Y>;
/** @internal */
export declare type GroupAreaVisual<Y extends NumericType = NumericType> = {
    type: 'group_area';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupAreaSeries<Y>;
    annotation: Record<string, Annotation<'string', Y>> | null;
    layout: Layout<'string', AxisTypeOf<Y>>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupAreaVisual(config: Visual): config is GroupAreaVisual;
/**
 * Defines a {@link GroupAreaVisualDefinition} to display an area chart, presenting data points connected by shaded line segments from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupAreaVisualDefinition<Y extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_area';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupAreaSeriesDefinition} to display */
    series: GroupAreaSeriesDefinition<Y> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', Y>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', AxisTypeOf<Y>>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupAreaVisual} to display an area chart, presenting data points connected by shaded line segments from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupAreaVisualDefinition}
 * @returns a valid {@link GroupAreaVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create an area visual
 *  const visual = GroupAreaVisual({
 *      series: GroupAreaValueSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Total,
 *          color: ColorValue()
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupAreaVisual<Y extends NumericType = NumericType>(config: Omit<GroupAreaVisualDefinition<Y>, 'kind' | 'type'>): GroupAreaVisualDefinition<Y>;
/** @internal */
export declare type GroupRidgelineVisual<Z extends NumericType = NumericType> = {
    type: 'group_ridgeline';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupRidgelineSeries<Z>;
    annotation: Record<string, Annotation<'string', 'string'>> | null;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupRidgelineVisual(config: Visual): config is GroupRidgelineVisual;
/**
 * Defines a {@link GroupRidgelineVisualDefinition} to display a ridge line chart, presenting stacked series of data points connected by shaded line segments from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupRidgelineVisualDefinition<Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_ridgeline';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupRidgelineSeriesDefinition} to display */
    series: GroupRidgelineSeriesDefinition<Z> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupRidgelineVisual} to display a ridge line chart, presenting stacked series of data points connected by shaded line segments from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupRidgelineVisualDefinition}
 * @returns a valid {@link GroupRidgelineVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create ridgleine chart
 *  const visual = GroupRidgelineVisual({
 *      series: GroupRidgelineSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Category,
 *          z: group_view.aggregations.Total,
 *          z_min: group_view.aggregations.Minimum,
 *          z_max: group_view.aggregations.Maximum,
 *          color: GroupOrdinalColor(group_view.aggregations.Product),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupRidgelineVisual<Y extends NumericType = NumericType>(config: Omit<GroupRidgelineVisualDefinition<Y>, 'kind' | 'type'>): GroupRidgelineVisualDefinition<Y>;
/** @internal */
export declare type GroupLineVisual<Y extends NumericType = NumericType> = {
    type: 'group_line';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupLineSeries<Y>;
    annotation: Record<string, Annotation<'string', Y>> | null;
    layout: Layout<'string', AxisTypeOf<Y>>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupLineVisual(config: Visual): config is GroupLineVisual;
/**
 * Defines a {@link GroupLineVisualDefinition} to display a line chart, presenting data points connected by line segments from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupLineVisualDefinition<Y extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_line';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupLineSeriesDefinition} to display */
    series: GroupLineSeriesDefinition<Y> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<'string', Y>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', AxisTypeOf<Y>>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupLineVisual} to display a line chart, presenting data points connected by line segments from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupLineVisualDefinition}
 * @returns a valid {@link GroupLineVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create line chart
 *  const visual = GroupLineVisual({
 *      series: GroupLineValueSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Total,
 *          color: ColorValue()
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupLineVisual<X extends PrimitiveType = PrimitiveType, Y extends NumericType = NumericType>(config: Omit<GroupLineVisualDefinition<Y>, 'kind' | 'type'>): GroupLineVisualDefinition<Y>;
/** @internal */
export declare type GroupScatterVisual<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends NumericType = NumericType> = {
    type: 'group_scatter';
    kind: 'group';
    name: string;
    subtitle?: string;
    series: GroupScatterSeries<X, Y, Z>;
    annotation: Record<string, Annotation<X, Y>> | null;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupScatterVisual(config: Visual): config is GroupScatterVisual;
/**
 * Defines a {@link GroupScatterVisualDefinition} to display a scatter chart, presenting dots to represent values from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupScatterVisualDefinition<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_scatter';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupScatterSeriesDefinition} to display */
    series: GroupScatterSeriesDefinition<X, Y, Z> | null;
    /** the {@link GroupAnnotationDefinition} to display  */
    annotation?: Record<string, GroupAnnotationDefinition<X, Y>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupScatterVisual} to display a scatter chart, presenting dots to represent values from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupScatterVisualDefinition}
 * @returns a valid {@link GroupScatterVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create scatter chart
 *  const visual = GroupScatterVisual({
 *      series: GroupScatterSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          y: group_view.aggregations.Category,
 *          size: group_view.aggregations.Total,
 *          color: GroupOrdinalColor(group_view.aggregations.Area)
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupScatterVisual<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends NumericType = NumericType>(config: Omit<GroupScatterVisualDefinition<X, Y, Z>, 'kind' | 'type'>): GroupScatterVisualDefinition<X, Y, Z>;
/** @internal */
export declare type GroupTreeMapVisual<Z extends NumericType = NumericType> = {
    type: 'group_treemap';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupTreeMapSeries<Z>;
    layout: Layout<null, null>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupTreeMapVisual(config: GroupVisual): config is GroupTreeMapVisual;
/**
 * Defines a {@link GroupTreeMapVisualDefinition} to display a map chart, presenting relative value using rectangles from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupTreeMapVisualDefinition<Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_treemap';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupTreeMapSeriesDefinition} to display */
    series: GroupTreeMapSeriesDefinition<Z> | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<null, null>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupTreeMapVisual} to display a map chart, presenting relative value using rectangles from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupTreeMapVisualDefinition}
 * @returns a valid {@link GroupTreeMapVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create tree map visual
 *  const visual = GroupTreeMapVisual({
 *      series: GroupTreeMapSeries({
 *          view: group_view,
 *          x: group_view.aggregations.Product,
 *          value: group_view.aggregations.Total,
 *          color: GroupLinearColor(group_view.aggregations.Total)
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupTreeMapVisual<Z extends NumericType = NumericType>(config: Omit<GroupTreeMapVisualDefinition<Z>, 'kind' | 'type'>): GroupTreeMapVisualDefinition<Z>;
/** @internal */
export declare type GroupTableVisual = {
    type: 'group_table';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupTableSeries;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupTableVisual(config: GroupVisual): config is GroupTableVisual;
/**
 * Defines a {@link GroupTableVisualDefinition} to display a table, presenting cells of values from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupTableVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'group_table';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupTableSeriesDefinition} to display */
    series: GroupTableSeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupTableVisual} to display a table, presenting cells of values from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupTableVisualDefinition}
 * @returns a valid {@link GroupTableVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create table visual
 *  const visual = GroupTableVisual({
 *      series: GroupTableSeries({
 *          view: group_view,
 *          columns: [
 *              GroupTableColumn({
 *                  value: group_view.aggregations.Product,
 *                  color: GroupOrdinalColor(group_view.aggregations.Product),
 *              }),
 *              GroupTableColumn({
 *                  value: group_view.aggregations.Total,
 *                  background: GroupLinearColor(group_view.aggregations.Total),
 *                  tooltip: Tooltip({
 *                      title: Const("Values"),
 *                      description: StringJoin`<p>The total is <b>${group_view.fields.Total}</b>.</p>`,
 *                      values: {
 *                          Avg: group_view.fields.Avg,
 *                          Max: group_view.fields.Max,
 *                          Min: group_view.fields.Min,
 *                      }
 *                  })
 *              }),
 *          ],
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupTableVisual(config: Omit<GroupTableVisualDefinition, 'kind' | 'type'>): GroupTableVisualDefinition;
/** @internal */
export declare type GroupKPIVisual = {
    type: 'group_kpi';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupKPISeries;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupKPIVisual(config: GroupVisual): config is GroupKPIVisual;
/**
 * Defines a {@link GroupKPIVisualDefinition} to display a table, presenting cells of values from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupKPIVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'group_kpi';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupKPISeriesDefinition} to display */
    series: GroupKPISeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupKPIVisual} to display a table, presenting cells of values from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupKPIVisualDefinition}
 * @returns a valid {@link GroupKPIVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create table visual
 *  const visual = GroupKPIVisual({
 *      series: GroupKPISeries({
 *          view: group_view,
 *          columns: [
 *              GroupKPIColumn({
 *                  value: group_view.aggregations.Product,
 *                  color: GroupOrdinalColor(group_view.aggregations.Product),
 *              }),
 *              GroupKPIColumn({
 *                  value: group_view.aggregations.Total,
 *                  background: GroupLinearColor(group_view.aggregations.Total),
 *                  tooltip: Tooltip({
 *                      title: Const("Values"),
 *                      description: StringJoin`<p>The total is <b>${group_view.fields.Total}</b>.</p>`,
 *                      values: {
 *                          Avg: group_view.fields.Avg,
 *                          Max: group_view.fields.Max,
 *                          Min: group_view.fields.Min,
 *                      }
 *                  })
 *              }),
 *          ],
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupKPIVisual(config: Omit<GroupKPIVisualDefinition, 'kind' | 'type'>): GroupKPIVisualDefinition;
/** @internal */
export declare type GroupPivotVisual<Z extends PrimitiveType = PrimitiveType> = {
    type: 'group_pivot';
    kind: 'group';
    name: string;
    subtitle?: string;
    annotation: null;
    series: GroupPivotSeries<Z>;
    layout: Layout<'string', 'string'>;
    notes: GroupHTMLSeries | null;
};
/** @internal */
export declare function isGroupPivotVisual(config: GroupVisual): config is GroupPivotVisual;
/**
 * Defines a {@link GroupPivotVisualDefinition} to display a pivot, presenting one or more discrete value categories from {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupPivotVisualDefinition<Z extends PrimitiveType = PrimitiveType> = {
    /** the {@link VisualDefinition} type */
    type: 'group_pivot';
    /** the {@link VisualDefinition} kind */
    kind: 'group';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link GroupPivotSeriesDefinition} to display */
    series: GroupPivotSeriesDefinition<Z> | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'> | null;
    /** the {@link GroupHTMLSeriesDefinition} notes to display  */
    notes?: GroupHTMLSeriesDefinition;
};
/**
 * Create a {@link GroupPivotVisual} to display a pivot, presenting one or more discrete value categories from {@link GroupView} data.
 *
 * @param definition: the desired {@link GroupPivotVisualDefinition}
 * @returns a valid {@link GroupPivotVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import group_view from "./gen/group.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a pivot visual
 *  const visual = GroupPivotVisual({
 *      series: GroupPivotSeries({
 *          view: group_view,
 *          col_pivot: group_view.aggregations.Product,
 *          row_pivot: group_view.aggregations.Category,
 *          value: group_view.aggregations.Total,
 *          color: GroupLinearColor(group_view.aggregations.Total)
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function GroupPivotVisual<Z extends PrimitiveType = PrimitiveType>(config: Omit<GroupPivotVisualDefinition<Z>, 'kind' | 'type'>): GroupPivotVisualDefinition<Z>;
/** @internal */
export declare type GroupVisual = GroupKPIVisual | GroupCombinedVisual | GroupHTMLVisual | GroupRidgelineVisual | GroupScatterVisual | GroupLineVisual | GroupAreaVisual | GroupPivotVisual | GroupTableVisual | GroupTreeMapVisual | GroupBarVisual | GroupColumnVisual | GroupPieVisual | GroupHeatMapVisual | GroupFlowVisual | GroupRangeVisual;
/**
 * Defines a {@link GroupVisualDefinition} to display {@link GroupView} data.
 *
 * @category Visual
 */
export declare type GroupVisualDefinition = GroupKPIVisualDefinition | GroupCombinedVisualDefinition | GroupHTMLVisualDefinition | GroupRidgelineVisualDefinition | GroupRangeVisualDefinition | GroupColumnVisualDefinition | GroupScatterVisualDefinition | GroupLineVisualDefinition | GroupAreaVisualDefinition | GroupPivotVisualDefinition | GroupTableVisualDefinition | GroupTreeMapVisualDefinition | GroupBarVisualDefinition | GroupPieVisualDefinition | GroupHeatMapVisualDefinition | GroupFlowVisualDefinition;
/** @internal */
export declare type RowTableVisual = {
    type: 'row_table';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowTableSeries;
    layout: Layout<'string', 'string'>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowTableVisual(config: Visual): config is RowTableVisual;
/**
 * Defines a {@link RowTableVisualDefinition} to display a table, presenting editable cells of values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowTableVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_table';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowTableSeriesDefinition} to display */
    series: RowTableSeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowTableVisual} to display a table, presenting editable cells of values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowTableVisualDefinition}
 * @returns a valid {@link RowTableVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a table visual
 *  const visual = RowTableVisual({
 *      series: RowTableSeries({
 *          view: row_view,
 *          columns: [
 *              RowTableColumn({
 *                  name: "Product",
 *                  value: row_view.fields.Product,
 *                  color: RowOrdinalColor(row_view.fields.Product)
 *              }),
 *              RowTableColumn({
 *                  name: "Date",
 *                  value: row_view.fields.Date,
 *              }),
 *              RowTableColumn({
 *                  name: "Qty",
 *                  value: row_view.fields.Qty,
 *                  color: RowLinearColor(row_view.fields.Qty)
 *              }),
 *              RowTableColumn({
 *                  name: "Amount",
 *                  value: row_view.fields.Amount,
 *                  background: RowLinearColor(row_view.fields.Amount)
 *              }),
 *         ]
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 * })
 * ```
 */
export declare function RowTableVisual(config: Omit<RowTableVisualDefinition, 'kind' | 'type'>): RowTableVisualDefinition;
/** @internal */
export declare type RowListVisual = {
    type: 'row_list';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowListSeries;
    layout: Layout<null, 'string'>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowListVisual(config: Visual): config is RowListVisual;
/**
 * Defines a {@link RowListVisualDefinition} to display a list, presenting a list of combined values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowListVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_list';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowListSeriesDefinition} to display */
    series: RowListSeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<null, 'string'> | null;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowListVisual} to display a list, presenting a list of combined values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowListVisualDefinition}
 * @returns a valid {@link RowListVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a list visual
 *  const visual = RowListVisual({
 *      series: RowListSeries({
 *          view: row_view,
 *          value: row_view.fields.Category,
 *          description: row_view.fields.Lorem,
 *          color: RowLinearColor(row_view.fields.Integer),
 *          elements: [
 *              RowListContent({
 *                  name: "Date",
 *                  value: row_view.fields.Date
 *              }),
 *              RowListContent({
 *                  name: "Category",
 *                  value: row_view.fields.Category,
 *                  color: RowOrdinalColor(row_view.fields.Category)
 *              }),
 *              RowListContent({
 *                  name: "Active",
 *                  value: row_view.fields.Active
 *              }),
 *          ],
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowListVisual(config: Omit<RowListVisualDefinition, 'kind' | 'type'>): RowListVisualDefinition;
/** @internal */
export declare type RowTreeVisual = {
    type: 'row_tree';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowTreeSeries;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowTreeVisual(config: Visual): config is RowTreeVisual;
/**
 * Defines a {@link RowTreeVisualDefinition} to display a tree, presenting nested values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowTreeVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_tree';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowTreeSeriesDefinition} to display */
    series: RowTreeSeriesDefinition | null;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowTreeVisual} to display a tree, presenting nested values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowTreeVisualDefinition}
 * @returns a valid {@link RowTreeVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a tree visual
 *  const visual = RowTreeVisual({
 *      series: RowTreeSeries({
 *          view: row_view,
 *          value: row_view.fields
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowTreeVisual(config: Omit<RowTreeVisualDefinition, 'kind' | 'type'>): RowTreeVisualDefinition;
/** @internal */
export declare type RowFormVisual = {
    type: 'row_form';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowFormSeries;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowFormVisual(config: Visual): config is RowFormVisual;
/**
 * Defines a {@link RowFormVisualDefinition} to display a form, presenting editable values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowFormVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_form';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowFormSeriesDefinition} to display */
    series: RowFormSeriesDefinition | null;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowFormVisual} to display a form, presenting editable values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowFormVisualDefinition}
 * @returns a valid {@link RowFormVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a form visual
 *  const visual = RowFormVisual({
 *      series: RowFormSeries({
 *          view: row_view,
 *          elements: [
 *              FormInput({
 *                  name: "Date",
 *                  value: row_view.fields.Date
 *              }),
 *              FormInput({
 *                  name: Active,
 *                  value: row_view.fields.Active
 *              }),
 *              FormInput({
 *                  name: "Category",
 *                  value: row_view.fields.Category
 *              }),
 *          ],
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowFormVisual(config: Omit<RowFormVisualDefinition, 'kind' | 'type'>): RowFormVisualDefinition;
/** @internal */
export declare type RowHTMLVisual = {
    type: 'row_html';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowHTMLSeries;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowHTMLVisual(config: Visual): config is RowHTMLVisual;
/**
 * Defines a {@link RowHTMLVisualDefinition} to display html content, presenting string values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowHTMLVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_html';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowHTMLSeriesDefinition} to display */
    series: RowHTMLSeriesDefinition | null;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowHTMLVisual} to display html content, presenting string values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowHTMLVisualDefinition}
 * @returns a valid {@link RowHTMLVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a html chart
 *  const visual = RowHTMLVisual({
 *      series: RowHTMLSeries({
 *          view: row_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{row_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(row_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowHTMLVisual(config: Omit<RowHTMLVisualDefinition, 'kind' | 'type'>): RowHTMLVisualDefinition;
/** @internal */
export declare type RowRidgelineVisual<X extends ContinuousType = ContinuousType, Z extends NumericType = NumericType> = {
    type: 'row_ridgeline';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowRidgelineSeries<X, Z>;
    annotation: Record<string, Annotation<X, 'string'>> | null;
    layout: Layout<AxisTypeOf<X>, 'string'>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowRidgelineVisual(config: Visual): config is RowRidgelineVisual;
/**
 * Defines a {@link RowRidgelineVisualDefinition} to display a ridge line chart, presenting stacked series of data points connected by shaded line segments from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowRidgelineVisualDefinition<X extends ContinuousType = ContinuousType, Z extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_ridgeline';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowRidgelineSeriesDefinition} to display */
    series: RowRidgelineSeriesDefinition<X, Z> | null;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<X, 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, 'string'>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowRidgelineVisual} to display a ridge line chart, presenting stacked series of data points connected by shaded line segments from {@link RowView} data.
 *
 * @param definition: the desired {@link RowRidgelineVisualDefinition}
 * @returns a valid {@link RowRidgelineVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create ridgleine chart
 *  const visual = RowRidgelineVisual({
 *      series: RowRidgelineSeries({
 *          view: row_view,
 *          x: row_view.aggregations.Product,
 *          y: row_view.aggregations.Category,
 *          z: row_view.aggregations.Total,
 *          z_min: row_view.aggregations.Minimum,
 *          z_max: row_view.aggregations.Maximum,
 *          color: RowOrdinalColor(row_view.aggregations.Product),
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowRidgelineVisual<X extends ContinuousType = ContinuousType, Z extends NumericType = NumericType>(config: Omit<RowRidgelineVisualDefinition<X, Z>, 'kind' | 'type'>): RowRidgelineVisualDefinition<X, Z>;
/** @internal */
export declare type RowTimelineVisual = {
    type: 'row_timeline';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowTimelineSeries;
    annotation: Record<string, Annotation<"datetime", PrimitiveType>> | null;
    layout: Layout<'datetime', 'string'>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowTimelineVisual(config: Visual): config is RowTimelineVisual;
/**
 * Defines a {@link RowTimelineVisualDefinition} to display a timeline, presenting durations accross time from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowTimelineVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_timeline';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowTimelineSeriesDefinition} to display */
    series: RowTimelineSeriesDefinition | null;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<'datetime', 'string'>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'datetime', 'string'>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowTimelineVisual} to display a timeline, presenting durations accross time from {@link RowView} data.
 *
 * @param definition: the desired {@link RowTimelineVisualDefinition}
 * @returns a valid {@link RowTimelineVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a timeline chart
 *  const visual = RowTimelineVisual({
 *      series: RowTimelineSeries({
 *          view: row_view,
 *          y: row_view.primary_key,
 *          x: [
 *              RowTimelineInput({
 *                  start: row_view.fields.Date,
 *                  end: row_view.fields.EndDate,
 *                  color: RowFixedColor(row_view.fields.Color),
 *                  border:  RowFixedColor(row_view.fields.Color),
 *                  opacity: row_view.fields.Price,
 *              })
 *          ]
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowTimelineVisual(config: Omit<RowTimelineVisualDefinition, 'kind' | 'type'>): RowTimelineVisualDefinition;
/** @internal */
export declare type RowGeoVisual = {
    type: 'row_geo';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowGeoSeries;
    annotation: null;
    origin: number[];
    zoom: number | null;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowGeoVisual(config: Visual): config is RowGeoVisual;
/**
 * Defines a {@link RowGeoVisualDefinition} to display a goegraphic chart, presenting spatial data from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowGeoVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_geo';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowGeoSeriesDefinition} to display */
    series: RowGeoSeriesDefinition | null;
    origin?: number[];
    zoom?: number;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowGeoVisual} to display a goegraphic chart, presenting spatial data from {@link RowView} data.
 *
 * @param definition: the desired {@link RowGeoVisualDefinition}
 * @returns a valid {@link RowGeoVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create geo chart
 *  const visual = RowGeoVisual({
 *      series: RowGeoSeries({
 *          view: row_view,
 *          lat: row_view.fields.Latitude,
 *          lon: row_view.fields.Longitude,
 *          color: RowOrdinalColor(row_view.fields.Category)
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowGeoVisual(config: Omit<RowGeoVisualDefinition, 'kind' | 'type'>): RowGeoVisualDefinition;
/** @internal */
export declare type RowLineVisual<X extends ContinuousType = ContinuousType> = {
    type: 'row_line';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowLineSeries<X>;
    annotation: Record<string, Annotation<X, NumericType>> | null;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<NumericType>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowLineVisual(config: Visual): config is RowLineVisual;
/**
 * Defines a {@link RowLineVisualDefinition} to display a line chart, presenting data points connected by line segments from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowLineVisualDefinition<X extends ContinuousType = ContinuousType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_line';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowLineSeriesDefinition} to display */
    series: RowLineSeriesDefinition<X> | null;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<X, NumericType>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<NumericType>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowLineVisual} to display a line chart, presenting data points connected by line segments from {@link RowView} data.
 *
 * @param definition: the desired {@link RowLineVisualDefinition}
 * @returns a valid {@link RowLineVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a line chart
 *  const visual = RowLineVisual({
 *      series: RowLineSeries({
 *          view: row_view,
 *          x: row_view.fields.EndDate,
 *          y_heading: "Values",
 *          y: [
 *              RowLineValue({
 *                  value: row_view.fields.Qty,
 *                  color: ColorValue(),
 *              }),
 *              RowLineDict({
 *                  value: row_view.fields.RateCard,
 *              })
 *          ]
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowLineVisual<X extends ContinuousType = ContinuousType>(config: Omit<RowLineVisualDefinition<X>, 'kind' | 'type'>): RowLineVisualDefinition;
/** @internal */
export declare type RowAreaVisual<X extends ContinuousType = ContinuousType> = {
    type: 'row_area';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowAreaSeries<X>;
    annotation: Record<string, Annotation<X, NumericType>> | null;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<NumericType>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowAreaVisual(config: Visual): config is RowAreaVisual;
/**
 * Defines a {@link RowAreaVisualDefinition} to display an area chart, presenting data points connected by shaded line segments from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowAreaVisualDefinition<X extends ContinuousType = ContinuousType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_area';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowAreaSeriesDefinition} to display */
    series: RowAreaSeriesDefinition<X> | null;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<X, NumericType>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<NumericType>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowAreaVisual} to display an area chart, presenting data points connected by shaded line segments from {@link RowView} data.
 *
 * @param definition: the desired {@link RowAreaVisualDefinition}
 * @returns a valid {@link RowAreaVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create an area chart
 *  const visual = RowAreaVisual({
 *      series: RowAreaSeries({
 *          view: row_view,
 *          x: row_view.fields.EndDate,
 *          y: row_view.fields.Qty,
 *          color: ColorValue()
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowAreaVisual<X extends ContinuousType = ContinuousType>(config: Omit<RowAreaVisualDefinition<X>, 'kind' | 'type'>): RowAreaVisualDefinition<X>;
/** @internal */
export declare type RowScatterVisual<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends ContinuousType = ContinuousType> = {
    type: 'row_scatter';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowScatterSeries<X, Y, Z>;
    annotation: Record<string, Annotation<X, Y>> | null;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowScatterVisual(config: Visual): config is RowScatterVisual;
/**
 * Defines a {@link RowScatterVisualDefinition} to display a scatter chart, presenting dots to represent values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowScatterVisualDefinition<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends ContinuousType = ContinuousType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_scatter';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowScatterSeriesDefinition} to display */
    series: RowScatterSeriesDefinition<X, Y, Z> | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<X, Y>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowScatterVisual} to display a scatter chart, presenting dots to represent values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowScatterVisualDefinition}
 * @returns a valid {@link RowScatterVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a scatter chart
 *  const visual = RowScatterVisual({
 *      series: RowScatterSeries({
 *          view: row_view,
 *          x: row_view.fields.Qty,
 *          y: row_view.fields.Amount,
 *          size: row_view.fields.Amount,
 *          color: RowOrdinalColor(row_view.fields.Category)
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowScatterVisual(config: Omit<RowScatterVisualDefinition, 'kind' | 'type'>): RowScatterVisualDefinition;
/** @internal */
export declare type RowPivotVisual = {
    type: 'row_pivot';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowPivotSeries;
    annotation: null;
    layout: Layout<'string', 'string'>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowPivotVisual(config: Visual): config is RowPivotVisual;
/**
 * Defines a {@link RowPivotVisualDefinition} to display a scatter chart, presenting dots to represent values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowPivotVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_pivot';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowPivotSeriesDefinition} to display */
    series: RowPivotSeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<'string', 'string'>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowPivotVisual} to display a scatter chart, presenting dots to represent values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowPivotVisualDefinition}
 * @returns a valid {@link RowPivotVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a scatter chart
 *  const visual = RowPivotVisual({
 *      series: RowPivotSeries({
 *          view: row_view,
 *          col_pivot: row_view.fields.CategoryOne,
 *          row_pivot: row_view.fields.CategoryTwo,
 *          label: row_view.fields.Title,
 *          value: row_view.fields.Values
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowPivotVisual(config: Omit<RowPivotVisualDefinition, 'kind' | 'type'>): RowPivotVisualDefinition;
/** @internal */
export declare type RowMarginalVisual<X extends PrimitiveType = PrimitiveType> = {
    type: 'row_marginal';
    kind: 'row';
    name: string;
    subtitle?: string;
    series: RowMarginalSeries<X>;
    annotation: Record<string, Annotation<X>> | null;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<PrimitiveType>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowMarginalVisual(config: Visual): config is RowMarginalVisual;
/**
 * Defines a {@link RowMarginalVisualDefinition} to display a marginal chart, presenting varying series of dots to represent values from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowMarginalVisualDefinition<X extends PrimitiveType = PrimitiveType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_marginal';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowMarginalSeriesDefinition} to display */
    series: RowMarginalSeriesDefinition<X> | null;
    /** the {@link RowAnnotationDefinition} to display  */
    annotation?: Record<string, RowAnnotationDefinition<X, PrimitiveType>>;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<PrimitiveType>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowMarginalVisual} to display a marginal anaylsis chart, presenting varying series of dots to represent values from {@link RowView} data.
 *
 * @param definition: the desired {@link RowMarginalVisualDefinition}
 * @returns a valid {@link RowMarginalVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a marginal analysis chart
 *  const visual = RowMarginalVisual({
 *      series: RowMarginalSeries({
 *          view: row_view,
 *          y: row_view.fields.Qty,
 *          x: [
 *              RowMarginalValue({
 *                  name: "String 1",
 *                  value: row_view.fields.Category,
 *                  color: ColorValue(),
 *              }),
 *              RowMarginalValue({
 *                  name: "Number 2",
 *                  value: row_view.fields.Qty,
 *                  color: ColorValue(colors.Red),
 *              }),
 *          ]
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowMarginalVisual(config: Omit<RowMarginalVisualDefinition, 'kind' | 'type'>): RowMarginalVisualDefinition;
/** @internal */
export declare type RowDistributionVisual = {
    type: 'row_distribution';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowDistributionSeries;
    layout: Layout<AxisTypeOf<NumericType>, AxisTypeOf<NumericType>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowDistributionVisual(config: Visual): config is RowDistributionVisual;
/**
 * Defines a {@link RowDistributionVisualDefinition} to display a distribution chart, presenting a statistival distribution from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowDistributionVisualDefinition = {
    /** the {@link VisualDefinition} type */
    type: 'row_distribution';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowDistributionSeriesDefinition} to display */
    series: RowDistributionSeriesDefinition | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<NumericType>, AxisTypeOf<NumericType>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowDistributionVisual} to display a distribution chart, presenting a statistival distribution from {@link RowView} data.
 *
 * @param definition: the desired {@link RowDistributionVisualDefinition}
 * @returns a valid {@link RowDistributionVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a distribution visual
 *  const visual = RowDistributionVisual({
 *      series: RowDistributionSeries({
 *          view: row_view,
 *          x: [
 *              RowDistributionDict({
 *                  value: row_view.fields.RateCard,
 *              }),
 *              RowDistributionValue({
 *                  value: row_view.fields.Price,
 *                  color: ColorValue(colors.Red),
 *              }),
 *          ],
 *      }),
 *      notes: RowHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowDistributionVisual(config: Omit<RowDistributionVisualDefinition, 'kind' | 'type'>): RowDistributionVisualDefinition;
/** @internal */
export declare type RowHexbinVisual<X extends NumericType = NumericType, Y extends NumericType = NumericType> = {
    type: 'row_hexbin';
    kind: 'row';
    name: string;
    subtitle?: string;
    annotation: null;
    series: RowHexbinSeries<X, Y>;
    layout: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    notes: RowHTMLSeries | null;
};
/** @internal */
export declare function isRowHexbinVisual(config: Visual): config is RowHexbinVisual;
/**
 * Defines a {@link RowHexbinVisualDefinition} to display a hex chart, presenting hexagons to represent value density from {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowHexbinVisualDefinition<X extends NumericType = NumericType, Y extends NumericType = NumericType> = {
    /** the {@link VisualDefinition} type */
    type: 'row_hexbin';
    /** the {@link VisualDefinition} kind */
    kind: 'row';
    /** the name of {@link VisualDefinition} */
    name: string;
    /** the subtitle of {@link VisualDefinition} */
    subtitle?: string;
    /** the {@link RowHexbinSeriesDefinition} to display */
    series: RowHexbinSeriesDefinition<X, Y> | null;
    /** the {@link Layout} configuring the display  */
    layout?: Layout<AxisTypeOf<X>, AxisTypeOf<Y>>;
    /** the {@link RowHTMLSeriesDefinition} notes to display  */
    notes?: RowHTMLSeriesDefinition;
};
/**
 * Create a {@link RowHexbinVisual} to display a scatter chart, presenting hexagons to represent value density from {@link RowView} data.
 *
 * @param definition: the desired {@link RowHexbinVisualDefinition}
 * @returns a valid {@link RowHexbinVisual}
 *
 * @category Visual
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import row_view from "./gen/row.view"
 *  import total_view from "./gen/total.view"
 *
 *  // create a hexbin visual
 *  const visual = RowHexbinVisual({
 *      series: RowHexbinSeries({
 *          view: row_view,
 *          x: row_view.fields.Qty,
 *          y: row_view.fields.Amount,
 *          color: ColorValue(),
 *      }),
 *      notes: GroupHTMLSeries({
 *          view: total_view,
 *          value: StringJoin`<p>
 *              Did you know that <b>{total_view.fields.TotalQty}</b>
 *              were sold resulting in total revenue of
 *              <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *          </p>`
 *      })
 *  })
 * ```
 */
export declare function RowHexbinVisual(config: Omit<RowHexbinVisualDefinition, 'kind' | 'type'>): RowHexbinVisualDefinition;
/** @internal */
export declare type RowVisual = RowPivotVisual | RowRidgelineVisual | RowHTMLVisual | RowMarginalVisual | RowHexbinVisual | RowDistributionVisual | RowAreaVisual | RowScatterVisual | RowLineVisual | RowGeoVisual | RowTimelineVisual | RowTableVisual | RowListVisual | RowFormVisual | RowTreeVisual;
/**
 * Defines a {@link RowVisualDefinition} to display {@link RowView} data.
 *
 * @category Visual
 */
export declare type RowVisualDefinition = RowPivotVisualDefinition | RowRidgelineVisualDefinition | RowHTMLVisualDefinition | RowMarginalVisualDefinition | RowHexbinVisualDefinition | RowDistributionVisualDefinition | RowTreeVisualDefinition | RowScatterVisualDefinition | RowAreaVisualDefinition | RowLineVisualDefinition | RowGeoVisualDefinition | RowTimelineVisualDefinition | RowTableVisualDefinition | RowListVisualDefinition | RowFormVisualDefinition;
/** @internal */
export declare type Visual = RowVisual | GroupVisual;
/**
 * Defines a {@link VisualDefinition} to display {@link View} data.
 *
 * @category Visual
 */
export declare type VisualDefinition = RowVisualDefinition | GroupVisualDefinition;
/** @internal */
export declare function toGroupHTMLVisual(def: GroupHTMLVisualDefinition): GroupHTMLVisual;
/** @internal */
export declare function toGroupFlowVisual<Z extends NumericType = NumericType>(def: GroupFlowVisualDefinition<Z>): GroupFlowVisual<Z>;
/** @internal */
export declare function toGroupHeatMapVisual<Z extends ContinuousType = ContinuousType>(def: GroupHeatMapVisualDefinition<Z>): GroupHeatMapVisual<Z>;
/** @internal */
export declare function toGroupPieVisual<Z extends NumericType = NumericType>(def: GroupPieVisualDefinition<Z>): GroupPieVisual<Z>;
/** @internal */
export declare function toGroupBarVisual<X extends NumericType = NumericType>(def: GroupBarVisualDefinition<X>): GroupBarVisual<X>;
/** @internal */
export declare function toGroupRangeVisual<X extends NumericType = NumericType>(def: GroupRangeVisualDefinition<X>): GroupRangeVisual<X>;
/** @internal */
export declare function toGroupColumnVisual<Y extends NumericType = NumericType>(def: GroupColumnVisualDefinition<Y>): GroupColumnVisual<Y>;
/** @internal */
export declare function toGroupAreaVisual<Y extends NumericType = NumericType>(def: GroupAreaVisualDefinition<Y>): GroupAreaVisual<Y>;
/** @internal */
export declare function toGroupRidgelineVisual<Z extends NumericType = NumericType>(def: GroupRidgelineVisualDefinition<Z>): GroupRidgelineVisual<Z>;
/** @internal */
export declare function toGroupLineVisual<Y extends NumericType = NumericType>(def: GroupLineVisualDefinition<Y>): GroupLineVisual<Y>;
/** @internal */
export declare function toGroupScatterVisual<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType, Z extends NumericType = NumericType>(def: GroupScatterVisualDefinition<X, Y, Z>): GroupScatterVisual<X, Y, Z>;
/** @internal */
export declare function toGroupTreeMapVisual<Z extends NumericType = NumericType>(def: GroupTreeMapVisualDefinition<Z>): GroupTreeMapVisual<Z>;
/** @internal */
export declare function toGroupCombinedVisual<Y extends NumericType = NumericType>(def: GroupCombinedVisualDefinition<Y>): GroupCombinedVisual<Y>;
/** @internal */
export declare function toGroupTableVisual(def: GroupTableVisualDefinition): GroupTableVisual;
/** @internal */
export declare function toGroupKPIVisual(def: GroupKPIVisualDefinition): GroupKPIVisual;
/** @internal */
export declare function toGroupPivotVisual<Z extends PrimitiveType = PrimitiveType>(def: GroupPivotVisualDefinition<Z>): GroupPivotVisual<Z>;
/** @internal */
export declare function toGroupVisual(def: GroupVisualDefinition): GroupVisual;
/** @internal */
export declare function toRowTableVisual(def: RowTableVisualDefinition): RowTableVisual;
/** @internal */
export declare function toRowListVisual(def: RowListVisualDefinition): RowListVisual;
/** @internal */
export declare function toRowTreeVisual(def: RowTreeVisualDefinition): RowTreeVisual;
/** @internal */
export declare function toRowFormVisual(def: RowFormVisualDefinition): RowFormVisual;
/** @internal */
export declare function toRowHTMLVisual(def: RowHTMLVisualDefinition): RowHTMLVisual;
/** @internal */
export declare function toRowPivotVisual(def: RowPivotVisualDefinition): RowPivotVisual;
/** @internal */
export declare function toRowTimelineVisual(def: RowTimelineVisualDefinition): RowTimelineVisual;
/** @internal */
export declare function toRowGeoVisual(def: RowGeoVisualDefinition): RowGeoVisual;
/** @internal */
export declare function toRowLineVisual<X extends ContinuousType = ContinuousType>(def: RowLineVisualDefinition<X>): RowLineVisual<X>;
/** @internal */
export declare function toRowAreaVisual<X extends ContinuousType = ContinuousType>(def: RowAreaVisualDefinition<X>): RowAreaVisual<X>;
/** @internal */
export declare function toRowScatterVisual<X extends PrimitiveType = PrimitiveType, Y extends PrimitiveType = PrimitiveType>(def: RowScatterVisualDefinition<X, Y>): RowScatterVisual<X, Y>;
/** @internal */
export declare function toRowRidgelineVisual<X extends ContinuousType = ContinuousType, Z extends NumericType = NumericType>(def: RowRidgelineVisualDefinition<X, Z>): RowRidgelineVisual<X, Z>;
/** @internal */
export declare function toRowMarginalVisual<X extends PrimitiveType = PrimitiveType>(def: RowMarginalVisualDefinition<X>): RowMarginalVisual<X>;
/** @internal */
export declare function toRowDistributionVisual(def: RowDistributionVisualDefinition): RowDistributionVisual;
/** @internal */
export declare function toRowHexbinVisual<X extends NumericType = NumericType, Y extends NumericType = NumericType>(def: RowHexbinVisualDefinition<X, Y>): RowHexbinVisual<X, Y>;
/** @internal */
export declare function toRowVisual(def: RowVisualDefinition): RowVisual;
/** @internal */
export declare function toVisual(def: VisualDefinition): Visual;
/**
 * Create a {@link ELARASchema} containing a {@link VisualDefinition}.
 *
 * @param definition: the desired {@link VisualDefinition}.
 * @return a valid {@link Visual} within a {@link ELARASchema}
 *
 * @category Visual
 *
 * @example
 *  ```typescript
 *  // create a page showing multiple visuals
 *  const schema = VisualSchema({
 *      RowHexbinVisual({
 *          series: RowHexbinSeries({
 *              view: row_view,
 *              x: row_view.fields.Qty,
 *              y: row_view.fields.Amount,
 *              color: ColorValue(),
 *          }),
 *          notes: GroupHTMLSeries({
 *              view: total_view,
 *              value: StringJoin`<p>
 *                  Did you know that <b>{total_view.fields.TotalQty}</b>
 *                  were sold resulting in total revenue of
 *                  <b>{PrintTruncatedCurrency(total_view.fields.TotalAmount)}</b>?
 *              </p>`
 *          })
 *      })
 * })
 * ```
 */
export declare function VisualSchema(def: VisualDefinition): ELARASchema;
