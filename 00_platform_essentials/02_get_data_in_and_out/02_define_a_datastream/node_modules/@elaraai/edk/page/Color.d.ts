// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { DictType, NumericType } from "../east/types";
import { ContinuousType } from "./Series";
import { Variable } from "../east/functions";
import { ViewAggregation } from "../analytics/View";
/**
 * Defines default color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const colors: {
    Base: string;
    Grid: string;
    Axis: string;
    Border: string;
    Text: string;
    DarkGray: string;
    Gray: string;
    LightGray: string;
    VeryLightGray: string;
    WhiteGray: string;
    Green: string;
    Orange: string;
    Blue: string;
    Red: string;
    Yellow: string;
    Pink: string;
    Violet: string;
    White: string;
};
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_gray: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_default: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_dark: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_blue_violet: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_red_yellow: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_green_violet: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_green_blue: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_blue_pink: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_green: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_blue: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_violet: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_yellow: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_pink: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_red: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_pairs: string[];
/**
 * Defines default set of color strings for {@link Application}'s'.
 *
 * @category Color
 */
export declare const pallette_ordinal: string[];
/** @internal */
export declare type ColorValue = {
    type: 'value';
    value: string | null;
};
/** @internal */
export declare type FixedOrdinalColor = {
    type: 'fixed_ordinal';
    value: Variable<'string'>;
    palette: Map<string, string | null> | null;
};
/** @internal */
export declare type FixedKeyColor = {
    type: 'fixed_key';
    value: Variable<DictType>;
    palette: Map<string, string | null> | null;
};
/** @internal */
export declare type OrdinalColor = {
    type: 'ordinal';
    palette: string[] | null;
    value: Variable<'string'>;
};
/** @internal */
export declare type FixedColor = {
    type: 'fixed';
    value: Variable<'string'>;
};
/** @internal */
export declare type KeyColor = {
    type: 'key';
    palette: string[] | null;
    value: Variable<DictType>;
};
/** @internal */
export declare type LinearColor = {
    type: 'linear';
    palette: [start_color: string, end_color: string] | [start_color: string, mid_color: string, end_color: string] | null;
    value: Variable<ContinuousType>;
    origin: boolean | null;
};
/** @internal */
export declare type Color = FixedKeyColor | FixedOrdinalColor | ColorValue | OrdinalColor | FixedColor | LinearColor | KeyColor;
/**
 * Defines a constant color value based on a hex string.
 *
 * @category Color
 */
export declare type ColorValueDefinition = {
    /** the type of color */
    type: 'value';
    /** the hex string value of the color */
    value?: string;
};
/**
 * Create a constant color value based on a hex string.
 *
 * @param value: the hex color value
 * @returns The {@link ColorValue}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  // Create the color value.
 *  const color = ColorValue('#FF6EBE')
 * ```
 */
export declare function ColorValue(value?: string): ColorValueDefinition;
/**
 * Defines a data based ordinal color based on a {@link ViewAggregation}.
 *
 * @category Color
 */
export declare type GroupOrdinalColorDefinition = {
    /** the type of color */
    type: 'ordinal';
    /** the optional palette to apply to the range */
    palette?: string[];
    /** the {@link ViewAggregation} defining the values */
    value: ViewAggregation<'string'>;
};
/**
 * Defines a data based ordinal color based on a {@link ViewAggregation}.
 *
 * @param value: the hex color value
 * @returns The {@link GroupOrdinalColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = GroupOrdinalColor(aggregation, ['#4AD998', '#5EDC9F', '#6FDEA7'])
 * ```
 */
export declare function GroupOrdinalColor(value: ViewAggregation<'string'>, palette?: string[]): GroupOrdinalColorDefinition;
/**
 * Defines a data based linear color based on a {@link ViewAggregation}.
 *
 * @category Color
 */
export declare type GroupLinearColorDefinition = {
    /** the type of color */
    type: 'linear';
    /** the optional palette to apply to the range */
    palette?: [start_color: string, end_color: string] | [start_color: string, mid_color: string, end_color: string];
    /** the {@link ViewAggregation} defining the values */
    value: ViewAggregation<ContinuousType>;
    /** set to true of the color range should be centered on the origin */
    origin?: boolean;
};
/**
 * Defines a data based linear color based on a {@link ViewAggregation}.
 *
 * @param value: the hex color value
 * @returns The {@link GroupLinearColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = GroupLinearColor(aggregation, ['#4AD998', '#5EDC9F'])
 * ```
 */
export declare function GroupLinearColor(value: ViewAggregation<ContinuousType>, palette?: [start_color: string, end_color: string] | [start_color: string, mid_color: string, end_color: string], origin?: boolean): GroupLinearColorDefinition;
/**
 * Defines a data based fixed color based on a {@link ViewAggregation}.
 *
 * @category Color
 */
export declare type GroupFixedColorDefinition = {
    /** the type of color */
    type: 'fixed';
    /** the {@link ViewAggregation} defining the values */
    value: ViewAggregation<'string'>;
};
/**
 * Defines a data based ordinal color based on a {@link ViewAggregation}.
 *
 * @param value: the hex color value
 * @returns The {@link GroupFixedColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = GroupFixedColor(aggregation)
 * ```
 */
export declare function GroupFixedColor(value: ViewAggregation<'string'>): GroupFixedColorDefinition;
/**
 * Defines a constant color lookup based on a hex string map.
 *
 * @category Color
 */
export declare type GroupFixedOrdinalColorDefinition = {
    /** the type of color */
    type: 'fixed_ordinal';
    /** the {@link Variable} defining the values */
    value: ViewAggregation<'string'>;
    /** the hex string value of the color */
    palette?: Map<string, string | null>;
};
/**
 * Create a constant color value lookup based on a hex string map.
 *
 * @param value: the hex color value map
 * @returns The {@link GroupFixedOrdinalColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  // Create the color value.
 *  const color = GroupFixedOrdinalColor(new Map([['value1', '#FF6EBE'], ['value2', '#FFFFFF']]))
 * ```
 */
export declare function GroupFixedOrdinalColor(value: ViewAggregation<'string'>, palette?: Map<string, string | null>): GroupFixedOrdinalColorDefinition;
/** @internal */
export declare function toGroupColor(def: GroupColorDefinition, fields: Record<string, Variable>): Color | null;
/**
 * Defines a data based ordinal color based on a {@link Variable}.
 *
 * @category Color
 */
export declare type RowOrdinalColorDefinition = {
    /** the type of color */
    type: 'ordinal';
    /** the optional palette to apply to the range */
    palette?: string[];
    /** the {@link Variable} defining the values */
    value: Variable<'string'>;
};
/**
 * Defines a data based ordinal color based on a {@link Variable}.
 *
 * @param value: the hex color value
 * @returns The {@link RowOrdinalColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = RowOrdinalColor(expression, ['#4AD998', '#5EDC9F', '#6FDEA7'])
 * ```
 */
export declare function RowOrdinalColor(value: Variable<'string'>, palette?: string[]): RowOrdinalColorDefinition;
/**
 * Defines a data based fixed color based on a {@link Variable}.
 *
 * @category Color
 */
export declare type RowFixedColorDefinition = {
    /** the type of color */
    type: 'fixed';
    /** the {@link Variable} defining the values */
    value: Variable<'string'>;
};
/**
 * Defines a data based fixed color based on a {@link Variable}.
 *
 * @param value: the hex color value
 * @returns The {@link RowFixedColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = RowFixedColor(expression)
 * ```
 */
export declare function RowFixedColor(value: Variable<'string'>): RowFixedColorDefinition;
/**
 * Defines a constant color lookup based on a hex string map.
 *
 * @category Color
 */
export declare type RowFixedOrdinalColorDefinition = {
    /** the type of color */
    type: 'fixed_ordinal';
    /** the {@link Variable} defining the values */
    value: Variable<'string'>;
    /** the hex string value of the color */
    palette?: Map<string, string | null>;
};
/**
 * Create a constant color value lookup based on a hex string map.
 *
 * @param value: the hex color value map
 * @returns The {@link RowFixedOrdinalColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  // Create the color value.
 *  const color = RowFixedOrdinalColor(new Map([['value1', '#FF6EBE'], ['value2', '#FFFFFF']]))
 * ```
 */
export declare function RowFixedOrdinalColor(value: Variable<'string'>, palette?: Map<string, string | null>): RowFixedOrdinalColorDefinition;
/**
 * Defines a constant color lookup based on a hex string map.
 *
 * @category Color
 */
export declare type RowFixedKeyColorDefinition = {
    /** the type of color */
    type: 'fixed_key';
    /** the {@link Variable} defining the values */
    value: Variable<DictType>;
    /** the hex string value of the color */
    palette?: Map<string, string | null>;
};
/**
 * Create a constant color value lookup based on a hex string map.
 *
 * @param value: the hex color value map
 * @returns The {@link RowFixedKeyColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  // Create the color value.
 *  const color = RowFixedKeyColor(new Map([['value1', '#FF6EBE'], ['value2', '#FFFFFF']]))
 * ```
 */
export declare function RowFixedKeyColor(value: Variable<DictType>, palette?: Map<string, string | null>): RowFixedKeyColorDefinition;
/**
 * Defines a data based linear color based on a {@link Variable}.
 *
 * @category Color
 */
export declare type RowLinearColorDefinition = {
    /** the type of color */
    type: 'linear';
    /** the optional palette to apply to the range */
    palette?: [start_color: string, end_color: string] | [start_color: string, mid_color: string, end_color: string];
    /** the {@link Variable} defining the values */
    value: Variable<NumericType>;
    /** set to true of the color range should be centered on the origin */
    origin?: boolean;
};
/**
 * Defines a data based linear color based on a {@link Variable}.
 *
 * @param value: the hex color value
 * @returns The {@link RowLinearColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = RowLinearColor(expression, ['#4AD998', '#5EDC9F'])
 * ```
 */
export declare function RowLinearColor(value: Variable<NumericType>, palette?: [start_color: string, end_color: string] | [start_color: string, mid_color: string, end_color: string], origin?: boolean): RowLinearColorDefinition;
/**
 * Defines a data based ordinal color based on a collection {@link Variable} key.
 *
 * @category Color
 */
export declare type RowKeyColorDefinition = {
    /** the type of color */
    type: 'key';
    /** the optional palette to apply to the range */
    palette?: string[];
    /** the colelction {@link Variable} defining the key values */
    value: Variable<DictType>;
};
/**
 * Defines a data based ordinal color based on a collection {@link Variable} key.
 *
 * @param value: the hex color value
 * @returns The {@link RowKeyColor}
 *
 * @category Color
 *
 * @example
 *  ```typescript
 *  //Create the color expression.
 *  const color = RowKeyColor(expression, ['#4AD998', '#5EDC9F'])
 * ```
 */
export declare function RowKeyColor(value: Variable<DictType>, palette?: string[]): RowKeyColorDefinition;
/** @internal */
export declare function toRowColor(def: RowColorDefinition | RowKeyColorDefinition, fields: Record<string, Variable>): Color | null;
/**
 * Defines a data based color based on a {@link ViewAggregation}.
 *
 * @category Color
 */
export declare type GroupColorDefinition = GroupFixedOrdinalColorDefinition | ColorValueDefinition | GroupLinearColorDefinition | GroupOrdinalColorDefinition | GroupFixedColorDefinition;
/**
 * Defines a data based color based on a {@link Variable}.
 *
 * @category Color
 */
export declare type RowColorDefinition = RowFixedOrdinalColorDefinition | RowFixedKeyColorDefinition | ColorValueDefinition | RowLinearColorDefinition | RowFixedColorDefinition | RowOrdinalColorDefinition;
