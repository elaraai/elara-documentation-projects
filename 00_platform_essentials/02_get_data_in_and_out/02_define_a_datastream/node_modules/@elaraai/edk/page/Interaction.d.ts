// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { EastFunction, Variable } from "../east/functions";
import { PrimitiveType, StructType } from "../east/types";
import { ContinuousType } from "./Series";
/** @internal */
export declare type Tooltip = {
    title: EastFunction<"string">;
    values: Record<string, EastFunction> | null;
    description: EastFunction<"string"> | null;
};
/**
 * Defines {@link Tooltip} to display in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type TooltipDefinition = {
    /** the tooltip title {@link EastFunction} */
    title: EastFunction<"string">;
    /** the tooltip data table {@link EastFunction} */
    values?: Record<string, EastFunction>;
    /** the test description {@link EastFunction} */
    description?: EastFunction<"string">;
};
/**
 * Create a {@link Tooltip} to display in a {@link Visual}.
 *
 * @param definition: the desired {@link TooltipDefinition}
 * @returns a valid {@link Tooltip}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  //Create the color expression.
 *  const tooltip = Tooltip({
 *      title: table.fields.Name,
 *      values: {
 *          Qty: table.fields.Qty,
 *          Price: table.fields.Price,
 *          Amount: table.fields.Amount,
 *      },
 *      description: StringJoin`
 *          The sale total was ${PrintTruncatedCurrency(table.fields.Amount)}
 *          based on selling ${table.fields.Qty} {table.fields.Product} at
 *          a price of ${PrintTruncatedCurrency(table.fields.Price)}.
 *      `
 *  })
 * ```
 */
export declare function Tooltip(definition: TooltipDefinition): TooltipDefinition;
/** @internal */
export declare function toTooltip(def: TooltipDefinition, fields: Record<string, Variable>): Tooltip;
/** @internal */
export declare type Prompt = {
    enabled: EastFunction<"boolean"> | null;
    text: EastFunction<"string">;
    reasons: Record<string, EastFunction<"string">> | null;
    reason_field: EastFunction<"string"> | null;
};
/**
 * Defines UI dialog {@link Prompt} to display in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type PromptDefinition = {
    /** evaluate to true of the prompt should be visible  */
    enabled?: EastFunction<"boolean">;
    /** the {@link EastFunction} for the dialog string */
    text: EastFunction<"string">;
    /** the `Record` of {@link EastFunction}'s with the dialog reason list */
    reasons?: Record<string, EastFunction<"string">>;
    /** the {@link EastFunction} with the chosen reason */
    reason_field?: EastFunction<"string">;
};
/**
 * Create a UI dialog {@link Prompt} to display in a {@link Visual}.
 *
 * @param definition: the desired {@link PromptDefinition}
 * @returns a valid {@link Prompt}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined pipeline table
 *  import sales from "./gen/sales.pipeline"
 *
 *  const table = sales.output_table;
 *
 *  //Create the color expression.
 *  const prompt = Prompt({
 *      enabled: table.fields.Refundable,
 *      text: StringJoin`Please choose a reason to refund the sale to ${table.fields.Customer}?`
 *      reasons: {
 *          Unwanted: StringJoin`${table.fields.Customer} decided they don't like ${table.fields.Product}'s`,
 *          Price: StringJoin`${table.fields.Customer} thought ${PrintTruncatedCurrency(table.fields.Price)} was too expensive`
 *      },
 *      reason_field: EastFunction('Refund Reason', 'string')
 *  })
 * ```
 */
export declare function Prompt(prompt: PromptDefinition): PromptDefinition;
/** @internal */
export declare function toPrompt(def: PromptDefinition, fields: Record<string, Variable>): Prompt;
/** @internal */
export declare type Request = {
    selections: Record<string, EastFunction>;
    table: EastFunction<"string">;
};
/**
 * Defines a table {@link Request} to embed in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type RequestDefinition = {
    /** the {@link EastFunction} defining the data */
    selections: Record<string, EastFunction>;
    /** the request table {@link EastFunction} */
    table: EastFunction<'string'>;
};
/**
 * Create a table {@link Request} to embed in a {@link Visual}.
 *
 * @param definition: the desired {@link RequestDefinition}
 * @returns a valid {@link Request}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined structure
 *  import sales_structure from "./gen/sales.structure"
 *  // get a predefined pipeline table
 *  import sales_pipeline from "./gen/sales.pipeline"
 *
 *  const sales = sales_pipeline.output_table;
 *
 *  //Create the request to update a number option based on an option.
 *  const request = Request({
 *      table: Const(sales_structure.properties.qty.proposal_request_table.name),
 *      selections: {
 *          marker: sales.fields.marker,
 *          value: sales.fields.qty_current_value,
 *          scenario: sales.fields.scenario,
 *      }
 *  })
 * ```
 */
export declare function Request(request: RequestDefinition): RequestDefinition;
/** @internal */
export declare function toRequest(def: RequestDefinition, fields: Record<string, Variable>): Request;
/** @internal */
export declare type Select = {
    kind: 'select';
    enabled: EastFunction<"boolean"> | null;
};
/** @internal */
export declare function isSelect(interaction: Interaction): interaction is Select;
/**
 * Defines the configuration to {@link Select} a row in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type SelectDefinition = {
    /** the kind of interaction */
    kind: 'select';
    /** evaluate to true if the select should be enabled */
    enabled?: EastFunction<"boolean">;
};
/**
 * Create the configuration to {@link Select} a row in a {@link Visual}.
 *
 * @param definition: the desired {@link SelectDefinition}
 * @returns a valid {@link Select}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined pipeline table
 *  import sales_pipeline from "./gen/sales.pipeline"
 *
 *  const sales = sales_pipeline.output_table;
 *
 *  // allow selection only when a sale is actives
 *  const select = Select({
 *      enabled: table.fields.active,
 *  })
 * ```
 */
export declare function Select(config?: Omit<SelectDefinition, 'kind'>): SelectDefinition;
/** @internal */
export declare function toSelect(def: SelectDefinition, fields: Record<string, Variable>): Select;
/** @internal */
export declare type Edit<T extends PrimitiveType | "set" = PrimitiveType | "set"> = T extends "string" ? {
    type: 'string';
    kind: 'edit';
    value: EastFunction<'string'>;
    default_value: EastFunction<'string'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: EastFunction<"set"> | null;
    step: null;
    min: null;
    max: null;
} : T extends "float" ? {
    type: 'float';
    kind: 'edit';
    value: EastFunction<'float'>;
    default_value: EastFunction<'float'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: null;
    step: EastFunction<"float"> | null;
    min: EastFunction<"float"> | null;
    max: EastFunction<"float"> | null;
} : T extends "datetime" ? {
    type: 'datetime';
    kind: 'edit';
    value: EastFunction<'datetime'>;
    default_value: EastFunction<'datetime'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: null;
    step: null;
    min: EastFunction<"datetime"> | null;
    max: EastFunction<"datetime"> | null;
} : T extends "boolean" ? {
    type: 'boolean';
    kind: 'edit';
    value: EastFunction<'boolean'>;
    default_value: EastFunction<'boolean'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: null;
    step: null;
    min: null;
    max: null;
} : T extends "integer" ? {
    type: 'integer';
    kind: 'edit';
    value: EastFunction<'integer'>;
    default_value: EastFunction<'integer'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: null;
    step: EastFunction<"integer"> | null;
    min: EastFunction<"integer"> | null;
    max: EastFunction<"integer"> | null;
} : T extends "set" ? {
    type: 'set';
    kind: 'edit';
    value: EastFunction<'set'>;
    default_value: EastFunction<'set'> | null;
    enabled: EastFunction<"boolean"> | null;
    valid: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    prompt: Prompt | null;
    request: Request;
    range: EastFunction<"set"> | null;
    step: null;
    min: null;
    max: null;
} : never;
/** @internal */
export declare function isEdit(interaction: Interaction): interaction is Edit;
/**
 * Defines the configuration to {@link Edit} a row in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type EditDefinition<T extends PrimitiveType | "set" = PrimitiveType | "set"> = T extends "string" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link Variable} for the edited value */
    value: EastFunction<T>;
    /** the {@link Variable} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** {@link EastFunction} for the allowable edit range  */
    range?: EastFunction<"set">;
    /** @internal  */
    step?: undefined;
    /** @internal  */
    min?: undefined;
    /** @internal  */
    max?: undefined;
} : T extends "float" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<T>;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** {@link EastFunction} for the allowable edit step  */
    step?: EastFunction<T>;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<T>;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<T>;
} : T extends "datetime" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<T>;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** @internal  */
    step?: undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<'datetime'>;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<'datetime'>;
} : T extends "boolean" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<T>;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** @internal  */
    step?: undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: undefined;
    /** {@link EastFunction} for the allowable edit max  */
    max?: undefined;
} : T extends "integer" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<T>;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** {@link EastFunction} for the allowable edit step  */
    step?: EastFunction<T>;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<T>;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<T>;
} : T extends "set" ? {
    /** the kind of interaction */
    kind: 'edit';
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<T>;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<T>;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean">;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** {@link EastFunction} for the allowable edit range  */
    range?: EastFunction<"set">;
    /** @internal  */
    step?: undefined;
    /** @internal  */
    min?: undefined;
    /** @internal  */
    max?: undefined;
} : never;
/**
 * Create a configuration to {@link Edit} a row in a {@link Visual}.
 *
 * @param definition: the desired {@link EditDefinition}
 * @returns a valid {@link Edit}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined structure
 *  import sales_structure from "./gen/sales.structure"
 *  // get a predefined pipeline table
 *  import sales_pipeline from "./gen/sales.pipeline"
 *
 *  const sales = sales_pipeline.output_table;
 *
 *  // allow selection only when a sale is actives
 *  const edit = Edit({
 *      value: sales.fields.qty_current_value,
 *      default_value: sales.fields.qty_current_value,
 *      min: sales.fields.qty_min,
 *      max: sales.fields.qty_max,
 *      request: Request({
 *          table: Const(sales_structure.properties.qty.proposal_request_table.name),
 *          selections: {
 *              marker: sales.fields.marker,
 *              value: sales.fields.qty_current_value,
 *              scenario: sales.fields.scenario,
 *          }
 *      })
 *  })
 * ```
 */
export declare function Edit<T extends PrimitiveType | "set" = PrimitiveType | "set">(config: Omit<EditDefinition<T>, 'kind' | 'type'>): EditDefinition<T>;
/** @internal */
export declare function toEdit<T extends PrimitiveType | "set" = PrimitiveType | "set">(def: EditDefinition<T>, fields: Record<string, Variable>): Edit<T>;
/** @internal */
export declare type Clear = {
    kind: 'clear';
    enabled: EastFunction<"boolean"> | null;
    prompt: Prompt | null;
    request: Request;
};
/** @internal */
export declare function isClear(interaction: Interaction): interaction is Clear;
/**
 * Defines the configuration to {@link Clear} a row in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type ClearDefinition = {
    /** the kind of interaction */
    kind: 'clear';
    /** evaluate to true if the select should be enabled */
    enabled?: EastFunction<"boolean">;
    /** the {@link PromptDefinition} to display on clear */
    prompt?: PromptDefinition;
    /** the {@link RequestDefinition} associated with the clear */
    request: RequestDefinition;
};
/**
 * Create a configuration to {@link Clear} a row in a {@link Visual}.
 *
 * @param definition: the desired {@link EditDefinition}
 * @returns a valid {@link Clear}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined structure
 *  import sales_structure from "./gen/sales.structure"
 *  // get a predefined pipeline table
 *  import sales_pipeline from "./gen/sales.pipeline"
 *
 *  const sales = sales_pipeline.output_table;
 *
 *  // allow selection only when a sale is actives
 *  const edit = Clear({
 *      enabled: sales.fields.active,
 *      request: Request({
 *          table: Const(sales_structure.properties.qty.proposal_request_table.name),
 *          selections: {
 *              marker: sales.fields.marker,
 *              value: sales.fields.qty_current_value,
 *              scenario: sales.fields.scenario,
 *          }
 *      })
 *  })
 * ```
*/
export declare function Clear(config: Omit<ClearDefinition, 'kind'>): ClearDefinition;
/** @internal */
export declare function toClear(def: ClearDefinition, fields: Record<string, Variable>): Clear;
/** @internal */
export declare type Interaction = Clear | Edit | Select;
/**
 * Defines the configuration for {@link Interaction} with a row in a {@link Visual}.
 *
 * @category Interaction
 */
export declare type InteractionDefinition = ClearDefinition | EditDefinition | SelectDefinition;
/**
 * An east type to define {@link EditDefinition} from a string type option.
 *
 * @category Interaction
 */
export declare type StringOptionEditType<T extends 'string' | "set" = 'string'> = StructType<{
    scenario: 'string';
    marker: 'string';
    default_value: T;
    proposal_value: T;
    proposal_request: 'string';
    proposal_exists: 'boolean';
    range: 'set';
}>;
/**
 * An east type to define an {@link EditDefinition} from a continuous type option.
 *
 * @category Interaction
 */
export declare type ContinousOptionEditType<T extends ContinuousType = 'float'> = StructType<{
    scenario: 'string';
    marker: 'string';
    default_value: T;
    proposal_value: T;
    proposal_request: 'string';
    proposal_exists: 'boolean';
    min: T;
    max: T;
}>;
/**
 * An east type to define an {@link EditDefinition} from an option.
 *
 * @category Interaction
 */
export declare type OptionEditType<T extends PrimitiveType | "set" = PrimitiveType | "set"> = T extends 'string' | 'set' ? StringOptionEditType<T> : T extends ContinuousType ? ContinousOptionEditType<T> : never;
/**
 * Create a {@link OptionEdit} to edit an option in a {@link Visual}.
 *
 * @param option_value: {@link Variable} with value to populate
 * @param option_edit: {@link Variable} with the {@link OptionEditType}
 * @returns a valid {@link Clear}
 *
 * @category Interaction
 *
 * @example
 *  ```typescript
 *  // get a predefined structure
 *  import pipeline_plugin from "./gen/pipeline.plugin"
 *
 *  const options = pipeline_plugin.pipeline.OptionPipeline.output_table;
 *
 *  // allow selection only when a sale is actives
 *  const edit = OptionEdit({
 *      options.fields.Value,
 *      options.fields["Value (manual)"],
 *  })
 * ```
*/
export declare function OptionEdit<T extends PrimitiveType | "set">(option_value: Variable<T>, option_edit: Variable<OptionEditType<T>>): {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link Variable} for the edited value */
    value: EastFunction<"string">;
    /** the {@link Variable} with the default value */
    default_value?: EastFunction<"string"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** {@link EastFunction} for the allowable edit range  */
    range?: EastFunction<"set"> | undefined;
    /** @internal  */
    step?: undefined;
    /** @internal  */
    min?: undefined;
    /** @internal  */
    max?: undefined;
} | {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<"boolean">;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<"boolean"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** @internal  */
    step?: undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: undefined;
    /** {@link EastFunction} for the allowable edit max  */
    max?: undefined;
} | {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<"float">;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<"float"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** {@link EastFunction} for the allowable edit step  */
    step?: EastFunction<"float"> | undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<"float"> | undefined;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<"float"> | undefined;
} | {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<"integer">;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<"integer"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** {@link EastFunction} for the allowable edit step  */
    step?: EastFunction<"integer"> | undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<"integer"> | undefined;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<"integer"> | undefined;
} | {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<"datetime">;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<"datetime"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** @internal  */
    range?: undefined;
    /** @internal  */
    step?: undefined;
    /** {@link EastFunction} for the allowable edit min  */
    min?: EastFunction<"datetime"> | undefined;
    /** {@link EastFunction} for the allowable edit max  */
    max?: EastFunction<"datetime"> | undefined;
} | {
    /** the kind of interaction */
    kind: "edit";
    /** the {@link EastFunction} for the edited value */
    value: EastFunction<"set">;
    /** the {@link EastFunction} with the default value */
    default_value?: EastFunction<"set"> | undefined;
    /** evaluate to true if the edit should be enabled */
    enabled?: EastFunction<"boolean"> | undefined;
    /** an object returned to indicate if an interaction is valid */
    valid?: EastFunction<StructType<{
        success: "boolean";
        message: "string";
    }>> | null | undefined;
    /** the {@link PromptDefinition} to display on edit */
    prompt?: PromptDefinition | undefined;
    /** the {@link RequestDefinition} associated with the edit */
    request: RequestDefinition;
    /** {@link EastFunction} for the allowable edit range  */
    range?: EastFunction<"set"> | undefined;
    /** @internal  */
    step?: undefined;
    /** @internal  */
    min?: undefined;
    /** @internal  */
    max?: undefined;
};
