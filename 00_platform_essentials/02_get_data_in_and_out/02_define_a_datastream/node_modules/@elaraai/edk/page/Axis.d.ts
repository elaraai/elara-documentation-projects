// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { DictType, PrimitiveType, PrimitiveValue } from '../east/types';
import { Offset } from './Visual';
export declare type PartialExcept<T, K extends keyof T> = Partial<T> & Pick<T, K>;
/**
 * Defines an {@link AxisValue} value type, based on {@link AxisType}.
 *
 * @category Axis
 */
export declare type AxisValueTypeOf<T extends AxisType> = T extends 'string' ? string | null : T extends 'float' ? number | null : T extends 'datetime' ? Date | null : never;
/**
 * Defines an {@link AxisValue} value, based on {@link PrimitiveType}.
 *
 * @category Axis
 */
export declare type AxisValue<T extends PrimitiveType = PrimitiveType> = AxisValueTypeOf<AxisTypeOf<T>>;
/**
 * Create an {@link AxisValue} value, based on {@link PrimitiveValue}.
 *
 * @param value: the {@link PrimitiveValue} to convert to an {@link AxisValue}
 * @returns the relevant {@link AxisValue}
 *
 * @category Axis
 */
export declare function AxisValue<T extends PrimitiveType>(value: PrimitiveValue): AxisValue<T>;
/**
 * Defines an {@link Axis} type, based on {@link PrimitiveValue}.
 *
 * @category Axis
 */
export declare type AxisTypeOf<T extends PrimitiveType> = T extends 'string' | 'boolean' ? 'string' : T extends 'float' | 'integer' ? 'float' : T extends 'datetime' ? 'datetime' : never;
/**
 * Defines an {@link Axis} type, for display in a {@link Visual}.
 *
 * @category Axis
 */
export declare type AxisType = 'string' | 'float' | 'datetime';
/**
 * Create an {@link AxisType} value, based on {@link PrimitiveType} or {@link DictType}.
 *
 * @param type: the {@link PrimitiveType} or {@link DictType} to convert to an {@link AxisType}
 * @returns the relevant {@link AxisType}
 *
 * @category Axis
 */
export declare function AxisType<T extends PrimitiveType>(type: T | DictType<T>): AxisType;
/**
 * Defines an {@link Axis} font configuration.
 *
 * @category Axis
 */
export declare type AxisFont = {
    /** the font style */
    style: string | null;
    /** the font size */
    size: number | null;
    /** set to true if the font should be bold */
    bold: boolean | null;
    /** the font color */
    color: string | null;
};
/**
 * Create an {@link Axis} font configuration.
 *
 * @category Axis
 */
export declare function AxisFont(font?: Partial<AxisFont>): AxisFont;
/**
 * Defines an {@link Axis} grid configuration.
 *
 * @category Axis
 */
export declare type AxisGrid = {
    /** the grid color */
    color: string | null;
    /** the grid offset */
    offset: boolean | null;
    /** the grid thickness */
    thickness: number | null;
};
/**
 * Create an {@link Axis} grid configuration.
 *
 * @category Axis
 */
export declare function AxisGrid(grid?: Partial<AxisGrid>): AxisGrid;
/**
 * Defines an {@link Axis} title configuration.
 *
 * @category Axis
 */
export declare type AxisTitle = {
    /** the text to show in the title  */
    text: string | null;
    /** the title font */
    font: AxisFont | null;
};
/**
 * Create an {@link Axis} title configuration.
 *
 * @category Axis
 */
export declare function AxisTitle(grid?: Partial<AxisTitle>): AxisTitle;
/**
 * Defines an {@link Axis} ticks configuration.
 *
 * @category Axis
 */
export declare type AxisTick<T extends AxisType> = {
    /** the backgroun color for the ticks */
    background: string | null;
    /** set to true if the tick lines should be shown */
    mark: boolean | null;
    /** the tick label font */
    font: AxisFont | null;
    /** set to prepend the axis tick labels */
    prepend: string | null;
    /** set to append the axis ticks labels */
    append: string | null;
    /** the height of the axis tick area */
    size: number | null;
    /** should the ticks stratch to the visible area */
    stretch: boolean | null;
    /** when truncating, should the start or end truncate */
    truncate: 'start' | 'end';
    /** override the maximum axis value */
    min: AxisValueTypeOf<T> | null;
    /** override the maximum axis value */
    max: AxisValueTypeOf<T> | null;
    /** the horizontal alignment of the tick */
    alignment: 'left' | 'center' | 'right';
    /** padding */
    padding: number | null;
};
/**
 * Create an {@link Axis} tick configuration.
 *
 * @category Axis
 */
export declare function AxisTick<T extends AxisType>(tick?: Partial<AxisTick<T>>): AxisTick<T>;
/**
 * Defines an {@link Axis} step configuration.
 *
 * @category Axis
 */
export declare type AxisStep = {
    /** set to non zero to allow shrink factor */
    shrink: number | null;
    /** set to non zero to allow growth factor */
    grow: number | null;
    /** the default tick width spacing */
    size: number | null;
    /** set to true to fill visible area with the tick */
    fill: boolean | null;
};
/**
 * Create an {@link Axis} tick configuration.
 *
 * @category Axis
 */
export declare function AxisStep(step?: Partial<AxisStep>): AxisStep;
/**
 * Defines an {@link Axis} to display in a {@link Visual}.
 *
 * @category Axis
 */
export declare type Axis<T extends AxisType> = {
    /** the {@link AxisType}  */
    type: T;
    /** true if an axis brush should be shown */
    brush: boolean | null;
    /** true if the axis should be visible */
    visible: boolean | null;
    /** defines the placement of ticks and labels */
    placement: 'inside' | 'outside';
    /** defines the offset in axis increments */
    offset: bigint;
    /** defines the configuration of the axis grid */
    grid: AxisGrid | null;
    /** the axis title */
    title: AxisTitle | null;
    /** the axis ticks */
    ticks: AxisTick<T>;
    /** the axis step (along axis) */
    step: AxisStep;
    /** set to true when sorting shoudld be visible */
    sorted: boolean;
};
/**
 * Defines a horizontal (X) {@link Axis} to display in a {@link Visual}.
 *
 * @category Axis
 */
export declare type XAxis<T extends AxisType> = Axis<T> & {
    /** the placement of the axis in the {@link Visual} */
    orientation: 'top' | 'bottom';
};
/**
 * Create a horizontal (X) {@link Axis} to display in a {@link Visual}.
 *
 * @param axis: the desired {@link XAxis}
 * @returns a valid {@link XAxis}
 *
 * @category Axis
 */
export declare function XAxis<T extends AxisType>(axis: PartialExcept<Partial<XAxis<T>>, 'type'>): XAxis<T>;
/**
 * Defines a vertical (Y) {@link Axis} to display in a {@link Visual}.
 *
 * @category Axis
 */
export declare type YAxis<T extends AxisType> = Axis<T> & {
    /** the placement of the axis in the {@link Visual} */
    orientation: 'left' | 'right';
};
/**
 * Create a vertical (Y) {@link Axis} to display in a {@link Visual}.
 *
 * @param axis: the desired {@link YAxis}
 * @returns a valid {@link YAxis}
 *
 * @category Axis
 */
export declare function YAxis<T extends AxisType>(axis: PartialExcept<Partial<YAxis<T>>, 'type'>): YAxis<T>;
/**
 * Defines a layering (Z) {@link Axis} to layer {@link Visual} Y axes vertically.
 *
 * @category Axis
 */
export declare type ZAxis = Axis<'string'> & {
    /** the placement of the axis in the {@link Visual} */
    orientation: 'left' | 'right';
};
/**
 * Create a vertical (Z) {@link Axis} to display in a {@link Visual}.
 *
 * @param axis: the desired {@link ZAxis}
 * @returns a valid {@link ZAxis}
 *
 * @category Axis
 */
export declare function ZAxis(axis: Omit<Partial<ZAxis>, 'type'>): ZAxis;
/**
 * Defines a subset of {@link AxisType}'s for discrete variables.
 *
 * @category Axis
 */
export declare type DiscreteAxisType = Omit<AxisType, 'float' | 'datetime'>;
/**
 * Defines a subset of {@link AxisType}'s for continuous variables.
 *
 * @category Axis
 */
export declare type ContinuousAxisType = Omit<AxisType, 'string'>;
/**
 * Create a table style horizontal (X) {@link Axis} to display in a {@link Visual}.
 *
 * @param axis: the desired {@link XAxis}
 * @returns a valid {@link XAxis}
 *
 * @category Axis
 */
export declare function TableXAxis<T extends AxisType>(axis: PartialExcept<Partial<YAxis<T>>, 'type'>): XAxis<T>;
/**
 * Create a table style vertical (Y) {@link Axis} to display in a {@link Visual}.
 *
 * @param axis: the desired {@link YAxis}
 * @returns a valid {@link YAxis}
 *
 * @category Axis
 */
export declare function TableYAxis<T extends AxisType>(axis: PartialExcept<Partial<YAxis<T>>, 'type'>): YAxis<T>;
/**
 * Defines a layout for a {@link Visual}.
 *
 * @category Axis
 */
export declare type Layout_<X extends AxisType | null, Y extends AxisType | null, Z extends 'string' | null> = {
    /** the padding around the {@link Visual} in pixels */
    padding: Offset;
    /** the gap between {@link Visual} elements in pixels */
    gap: number;
    /** the {@link Visual} x axis */
    xaxis: X extends AxisType ? XAxis<X> : null;
    /** the {@link Visual} y axis */
    yaxis: Y extends AxisType ? YAxis<Y> : null;
    /** the {@link Visual} y axis */
    zaxis: Z extends 'string' ? ZAxis : null;
};
/**
 * Defines a layout for a {@link Visual}.
 *
 * @category Axis
 */
export declare type Layout<X extends AxisType | null, Y extends AxisType | null, Z extends 'string' | null = null> = {
    /** the padding around the {@link Visual} in pixels */
    padding: Offset;
    /** the gap between {@link Visual} elements in pixels */
    gap: number;
    /** the {@link Visual} x axis */
    xaxis: X extends AxisType ? XAxis<X> : null;
    /** the {@link Visual} y axis */
    yaxis: Y extends AxisType ? YAxis<Y> : null;
    /** the {@link Visual} y axis */
    zaxis: Z extends 'string' ? ZAxis : null;
};
/**
 * Create a layout for a {@link Visual}.
 *
 * @param layout: the desired {@link Layout}
 * @returns a valid {@link Layout}
 *
 
 * @category Axis
 */
export declare function Layout<X extends AxisType | null, Y extends AxisType | null, Z extends 'string' | null = null>(layout: Partial<Layout<X, Y, Z>>): Layout<X, Y, Z>;
