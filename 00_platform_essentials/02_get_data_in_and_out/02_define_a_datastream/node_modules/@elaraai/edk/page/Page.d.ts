// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { View, ViewFilter, ViewLoad, ViewSelection } from '../analytics/View';
import { Grant, GrantDefinition } from '../admin/Grant';
import { Visual, VisualBase } from './Visual';
import { ELARASchema } from '../schema/ELARASchema';
/** @internal */
export declare type PageLoad = {
    kind: 'page';
    value: Record<string, string>;
    partition_value?: string | null;
    partition_label?: string | null;
} & VisualBase;
/** @internal */
export declare type PageLoadValue = {
    value: ViewLoad;
    view: View;
};
/**
 * Defines a {@link PageLoadValue} based on {@link PrimitiveType}.
 *
 * @param value: the {@link ViewLoad} to load
 * @param view: the {@link View} containing the value
 * @returns a valid {@link PageLoadValue}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import sales_view from "./gen/sales.view"
 *
 *  // create a load value for loading sales by week
 *  const load =  PageLoadValue(sales_view.load.ByWeek, sales_view)
 * ```
 */
export declare function PageLoadValue(value: ViewLoad, view: View): PageLoadValue;
/**
 * Defines a {@link PageLoadDefinition} to enable loading {@link PageLoadValue}'s accross a {@link PanelPage}
 *
 * @category Page
 */
export declare type PageLoadDefinition = {
    kind: 'page';
    /** the label of the {@link PageLoadDefinition} */
    label?: string;
    /** the icon of the {@link PageLoadDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link PageLoadValue}'s' to load */
    value: PageLoadValue[];
    /** the {@link Grant}'s to restrict access to the {@link PageLoadDefinition} in the UI */
    grants?: Grant[];
};
/**
 * Create a {@link PageLoad} to enable loading {@link PageLoadValue}'s accross a {@link PanelPage}
 *
 * @param definition: the desired {@link PageLoadDefinition}
 * @returns a valid {@link PageLoad}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // get a predefined view
 *  import sales_view from "./gen/sales.view"
 *  import revenue_view from "./gen/revenue.view"
 *
 *  // load two views by week simulatneously within a PanelPage
 *  const sort =  PageLoad({
 *      label: 'By Week"
 *      value: [
 *          PageLoadValue(sales_view.load.ByWeek, sales_view),
*           PageLoadValue(revenue_view.load.ByWeek, revenue_view)
 *      ]
 *  })
 * ```
 */
export declare function PageLoad(config: Omit<PageLoadDefinition, 'kind'>): PageLoadDefinition;
/** @internal */
export declare type PanelDimension = {
    size: number;
    unit: '%' | 'px';
    shrink: number;
    grow: number;
};
/**
 * Define a {@link PanelDimensionDefinition} to define {@link PanelPage} element sizing, applying similar concepts to {@link https://css-tricks.com/snippets/css/a-guide-to-flexbox/}
 *
 * @category Page
 */
export declare type PanelDimensionDefinition = {
    /** the size of an element */
    size: number;
    /** the units of the size */
    unit?: '%' | 'px';
    /** the flex shrink factor, see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink} */
    shrink?: number;
    /** the flex grow factor, see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow} */
    grow?: number;
};
/**
 * Create a {@link PanelDimensionDefinition} to define {@link PanelPage} element sizing, applying similar concepts to {@link https://css-tricks.com/snippets/css/a-guide-to-flexbox/}
 *
 * @param definition: the desired {@link PanelDimensionDefinition}
 * @returns a valid {@link PanelDimension}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // create a dimension to take up 50% of an area
 *  const dimension = PanelDimension({ size: 50, unit: %, shrink: 0, grow: 0.5 })
 * ```
 */
export declare function PanelDimension(def?: PanelDimensionDefinition): PanelDimension;
/** @internal */
export declare type PanelContainer = {
    type: 'container';
    orientation: 'row' | 'column';
    size: PanelDimension;
    items: Panel[];
};
/** @internal */
export declare function isPanelContainer(config: Panel): config is PanelContainer;
/** @internal */
export declare function asPanelContainer(config: Panel): PanelContainer;
/**
 * Defines a {@link PanelContainerDefinition} to display one or more {@link PanelDefinition}'s within a {@link PanelPage}
 *
 * @category Page
 */
export declare type PanelContainerDefinition = {
    /** the type of panel */
    type: 'container';
    /** the orientation of the panel, row to organise items as columns */
    orientation: 'row' | 'column';
    /** the {@link PanelDimension} defining the size of the {@link PanelContainer} */
    size: PanelDimension;
    /** the {@link PanelContainer} child items */
    items: PanelDefinition[];
};
/**
 * Create a {@link PanelContainerDefinition} to display one or more {@link PanelDefinition}'s within a {@link PanelPage}
 *
 * @param definition: the desired {@link PanelContainerDefinition}
 * @returns a valid {@link PanelContainer}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // show a PanelContainer displaying to inner PanelVisual's
 *  const container = PanelContainer({
 *      size: PanelDimension({ size: 25 }),
 *      orientation: 'row',
 *      items: [
 *          PanelVisual({
 *              size: PanelDimension({ size: 250, unit: 'px' }),
 *              // ....
 *          }),
 *          PanelVisual({
 *              size: PanelDimension({ size: 100, unit: '%' }),
 *              // ....
 *          })
 *      ]
 *  });
 * ```
 */
export declare function PanelContainer(def: Omit<PanelContainerDefinition, 'type' | 'panel_type'>): PanelContainerDefinition;
/** @internal */
export declare type PanelVisual = {
    type: 'visual';
    size: PanelDimension;
    border: boolean;
    toolbar: boolean;
    visual: string;
};
/** @internal */
export declare function isPanelVisual(config: Panel): config is PanelVisual;
/** @internal */
export declare function asPanelVisual(config: Panel): PanelVisual;
/**
 * Defines a {@link PanelVisualDefinition} to show a {@link VisualDefinition}.
 *
 * @category Page
 */
export declare type PanelVisualDefinition = {
    /** the type of panel */
    type: 'visual';
    /** the {@link PanelDimension} defining the size of the {@link PanelContainer} */
    size: PanelDimension;
    /** set to true if a border should be displayed */
    border?: boolean;
    /** set to true if the toolbar should be visible */
    toolbar?: boolean;
    /** the {@link VisualDefinition} to display */
    visual: Visual;
};
/**
 * Create a {@link PanelVisualDefinition} to show a {@link VisualDefinition}.
 *
 * @param definition: the desired {@link PanelVisualDefinition}
 * @returns a valid {@link PanelVisual}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *
 *  import sales from "./gen/sales.visual"
 *
 *  // load a visual in a panel
 *  const visual = PanelVisual({
 *      name: "Panel One",
 *      size: PanelDimension({ size: 100 }),
 *      visual: sales
 *  })
 * ```
 */
export declare function PanelVisual(def: Omit<PanelVisualDefinition, 'type' | 'panel_type'>): PanelVisualDefinition;
/** @internal */
export declare type Panel = PanelContainer | PanelVisual;
/**
 * Defines a {@link PanelDefinition} to display content within a {@link PanelPage}.
 *
 * @category Page
 */
export declare type PanelDefinition = PanelContainerDefinition | PanelVisualDefinition;
/** @internal */
export declare function asPanel(config: Panel): Panel;
/** @internal */
export declare type VisualList = {
    name: string;
    icon: string;
    visuals: string[];
};
/**
 * Defines a {@link VisualListDefinition} to show listone or more {@link VisualDefinition}'s'.
 *
 * @category Page
 */
export declare type VisualListDefinition = {
    /** the page name */
    name?: string;
    /** the icon of the {@link VisualListDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the visuals to display for the {@link PanePage} */
    visuals: Visual[] | Record<string, Visual>;
};
/**
 * Create a {@link VisualListDefinition} to show one or more {@link Visual}'s'.
 *
 * @param definition: the desired {@link VisualListDefinition}
 * @returns a valid {@link VisualList}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  import chart from "./gen/chart.visual"
 *
 *  // create a page showing multiple visuals
 *  const page = VisualList({
 *      name: 'Visuals',
 *      visuals: [
 *          chart
 *      ]
 * })
 * ```
 */
export declare function VisualList(def: Omit<VisualListDefinition, 'type'>): VisualListDefinition;
/** @internal */
export declare type PanelPage = {
    type: 'panel';
    name: string;
    icon: string;
    container: PanelContainer;
    filters: Record<string, ViewFilter> | null;
    selections: Record<string, ViewSelection> | null;
    load: Record<string, PageLoad | ViewLoad> | null;
    grants: Grant[];
    list: VisualList | null;
};
/** @internal */
export declare function isPanelPage(config: Page): config is PanelPage;
/** @internal */
export declare function asPanelPage(config: Page): PanelPage;
/**
 * Defines a {@link PanelPageDefinition} to show one or more {@link VisualDefinition}'s'.
 *
 * @category Page
 */
export declare type PanelPageDefinition = {
    /** the type of page */
    type: 'panel';
    /** the page name */
    name: string;
    /** the icon of the {@link PanelPageDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the container to display in the {@link PanelPage} */
    container: PanelContainerDefinition | null;
    /** a `Record` of the {@link ViewFilter}'s to enable filtering of the {@link PanelPage} in the UI*/
    filters?: Record<string, ViewFilter>;
    /** a `Record` of the {@link ViewSelection}'s to enable sorting of the {@link PanelPage} in the UI*/
    selections?: Record<string, ViewSelection>;
    /** a `Record` of the {@link PageLoad}'s to facilitate loading different {@link Partition}'s in the UI*/
    load?: Record<string, PageLoadDefinition | ViewLoad>;
    /** the {@link GrantDefinition}'s to restrict access to the {@link PanelPage} in the UI */
    grants?: GrantDefinition[];
    /** the {@link VisualListDefinition}'s to list other visuals to place on the {@link PanelPage} in the UI */
    list?: VisualListDefinition;
};
/**
 * Create a {@link PanelPageDefinition} to show one or more {@link VisualDefinition}'s'.
 *
 * @param definition: the desired {@link PanelPageDefinition}
 * @returns a valid {@link PanelPage}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // create a page showing multiple visuals
 *  const page = PanelPage({
 *      name: 'Page',
 *      container: PanelContainer({
 *          size: PanelDimension({ size: 25 }),
 *          orientation: 'row',
 *          items: [
 *              PanelVisual({
 *                  size: PanelDimension({ size: 250, unit: 'px' }),
 *                  // ....
 *              }),
 *              PanelVisual({
 *                  size: PanelDimension({ size: 100, unit: '%' }),
 *                  // ....
 *              })
 *          ]
 *      })
 * })
 * ```
 */
export declare function PanelPage(def: Omit<PanelPageDefinition, 'type'>): PanelPageDefinition;
/** @internal */
export declare type UserPage = {
    type: 'user';
    name: string;
    icon: string;
    grants: Grant[];
};
/** @internal */
export declare function isUserPage(config: Page): config is UserPage;
/** @internal */
export declare function asUserPage(config: Page): UserPage;
/**
 * Defines a {@link UserPageDefinition} to manage ELARA {@link User}'s.
 *
 * @category Page
 */
export declare type UserPageDefinition = {
    /** the type of page */
    type: 'user';
    /** the name of page */
    name: string;
    /** the icon of the {@link UserPageDefinition} as mdi {@link https://materialdesignicons.com/} */
    icon?: string;
    /** the {@link Grant}'s to restrict access to the {@link UserPage} in the UI */
    grants?: GrantDefinition[];
};
/**
 * Create a {@link PanelPageDefinition} to show one or more {@link VisualDefinition}'s'.
 *
 * @param definition: the desired {@link PanelPageDefinition}
 * @returns a valid {@link PanelPage}
 *
 * @category Page
 *
 * @example
 * ```typescript
 *  // create a page to manage users
 *  const page = UserPage({ name: 'User Management' })
 * ```
 */
export declare function UserPage(def: Omit<UserPageDefinition, 'type'>): UserPageDefinition;
/** @internal */
export declare type Page = PanelPage | UserPage;
/**
 * Defines a {@link PageDefinition} to display in an {@link Application}.
 *
 * @category Page
 */
export declare type PageDefinition = PanelPageDefinition | UserPageDefinition;
/** @internal */
export declare function PanelItems(panels: Panel[]): Panel[];
/** @internal */
export declare function PanelVisuals(panels: Panel[]): PanelVisual[];
/** @internal */
export declare function toVisualList(def: VisualListDefinition): VisualList;
/** @internal */
export declare function toPanel(def: PanelDefinition): Panel;
/** @internal */
export declare function toPanelPage(def: Omit<PanelPageDefinition, 'type'>): PanelPage;
/**
 * Create a {@link ELARASchema} containing a {@link PageDefinition}.
 *
 * @param definition: the desired {@link PageDefinition}.
 * @return a valid {@link PanelPage} within a {@link ELARASchema}
 *
 * @category Page
 *
 * @example
 *  ```typescript
 *  // create a page showing multiple visuals
 *  const schema = PanelPageSchema({
 *      name: 'Page',
 *      container: PanelContainer({
 *          size: PanelDimension({ size: 25 }),
 *          orientation: 'row',
 *          items: [
 *              PanelVisual({
 *                  size: PanelDimension({ size: 250, unit: 'px' }),
 *                  // ....
 *              }),
 *              PanelVisual({
 *                  size: PanelDimension({ size: 100, unit: '%' }),
 *                  // ....
 *              })
 *          ]
 *      })
 * })
 * ```
 */
export declare function PanelPageSchema(def: Omit<PanelPageDefinition, 'type'>): ELARASchema;
/** @internal */
export declare function toUserPage(def: Omit<UserPageDefinition, 'type'>): UserPage;
/**
 * Create a {@link ELARASchema} containing a {@link PageDefinition}.
 *
 * @param definition: the desired {@link PageDefinition}.
 * @return a valid {@link UserPage} within a {@link ELARASchema}
 *
 * @category Page
 *
 * @example
 *  ```typescript
 *  // create a user page within a ELARASchema
 *  const schema = UserPageSchema({ name: 'User Management' })
 * ```
 */
export declare function UserPageSchema(def: Omit<UserPageDefinition, 'type'>): ELARASchema;
/** @internal */
export declare function toPage(def: PageDefinition): Page;
