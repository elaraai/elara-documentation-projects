// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { PipelineDefinition } from '../pipeline/Pipeline';
import { ViewAggregationDefinition, ViewFilterDefinition, ViewGroupDefinition, ViewLoadDefinition, ViewSelectionDefinition } from '../analytics';
import { ELARASchema } from '../schema/ELARASchema';
import { Partition } from '../data/Table';
import { Grant } from '../admin/Grant';
import { EastFunction, PrimitiveType, StandardAggregationDefinition, StandardAggregationType } from '..';
/**
 * Utility plugin to simplify creating both a {@link PipelineDefinition} and {@link ViewDefinition} with diagnostic pages.
 *
 * @param definition: the desired {@link PipelineDefinition}.
 * @return a {@link ELARASchema} containing a {@link PipelineDefinition} and {@link ViewDefinition} contents
 *
 * @category Pipeline
 *
 * @example
 * ```typescript
 * // Create a Pipeline and View to aggregate costs into weekly totals per category.
 * const pipeline = PipelineViewPlugin(Pipeline({
 *     name: 'Weekly Costs',
 *     input_table: table,
 *     operations: [
 *         AggregateOperation({
 *             // create a group key
 *             group_field: Variable("Key", 'string'),
 *             // group by the start of the week
 *             group_value: StringJoin`WC${Floor(Variable('date', 'datetime'), "week")}`,
 *             aggregations: {
 *                 // keep the date for each week
 *                 week: Unique(Floor(Variable('date', 'datetime'), "week")),
 *                 // collect the sum of costs per category in a `Dict`
 *                 costs: CollectDictSum(
 *                     Variable("Category", 'string'),
 *                     Variable("Cost", 'integer')
 *                 )
 *             }
 *         })
 *     ]
 * }))
 * ```
 */
export declare function PipelineViewPlugin(definition: PipelineDefinition & {
    /** the {@link Partition}'s to build the {@link ViewDefinition} from */
    partition?: Partition;
    /** set to true to output all input fields as {@link ViewSelection}s */
    keep_all?: boolean;
    /** a `Record` of the evaluated {@link Expression}'s */
    selections?: Record<string, ViewSelectionDefinition | EastFunction>;
    /** a `Record` of the {@link ViewGroupDefinition}'s to apply to group the data */
    groups?: Record<string, ViewGroupDefinition | EastFunction<PrimitiveType>>;
    /** a `Record` of the {@link ViewAggregationDefinition}'s to apply to within each group */
    aggregations?: Record<string, ViewAggregationDefinition | StandardAggregationDefinition<PrimitiveType | "set", StandardAggregationType>>;
    /** a `Record` of the {@link ViewFilterDefinition}'s to enable filtering of the {@link ViewDefinition} in the UI*/
    filters?: Record<string, ViewFilterDefinition>;
    /** a `Record` of the {@link ViewFilterDefinition}'s to facilitate loading different {@link Partition}'s in the UI*/
    load?: Record<string, ViewLoadDefinition | Partition>;
    /** the {@link Grant}'s to restrict access to the {@link ViewDefinition} in the UI */
    grants?: Grant[];
}): ELARASchema;
