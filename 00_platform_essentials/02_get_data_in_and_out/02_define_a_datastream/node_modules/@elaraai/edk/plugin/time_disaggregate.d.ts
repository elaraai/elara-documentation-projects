// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Expression } from '../east/definition';
import { TimeUnit, Variable } from '../east/functions';
import { ELARASchema } from '../schema/ELARASchema';
import { Table } from '../data/Table';
/**
 * A {@link TimeDisaggregationDefinition} to define an interval time intersection for the {@link TimeDisaggregatePlugin}.
 *
 * @category DataSource
 */
export declare type TimeDisaggregationDefinition = {
    /** the {@link Table} to define the intersections for */
    table: Table;
    /** the {@link Expression} with the start of the interval */
    start: Expression<"datetime">;
    /** the {@link Expression} with the end of the interval */
    end: Expression<"datetime">;
    /** the {@link Variable} to output the each intersected interval duration into */
    duration?: Variable<"float">;
    /** the {@link Expression} to output each interval time into */
    interval?: Variable<"datetime">;
    /** the {@link TimeUnit} or {@link CalendarUnit} of each interval */
    unit: TimeUnit;
};
/**
 * Create a {@link TimeDisaggregationDefinition}  to define an interval time intersection for the {@link TimeDisaggregatePlugin}.
 *
 * @param definition: the desired {@link TimeDisaggregationDefinition}.
 * @return a valid {@link TimeDisaggregation}
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasource to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  // Create a time interval intersection
 *  const intersection = TimeDisaggregation({
 *       table: datasource_one.output,
 *       start: datasource_one.output.fields.StartDate,
 *       end: datasource_one.output.fields.EndDate,
 *  })
 * ```
 */
export declare function TimeDisaggregation(definition: TimeDisaggregationDefinition): TimeDisaggregationDefinition;
/**
 * A {@link TimeDisaggregatePluginDefinition} to configure the {@link TimeDisaggregatePlugin}.
 *
 * @category DataSource
 */
export declare type TimeDisaggregatePluginDefinition = {
    /** the collection of {@link TimeDisaggregation}s to apply */
    inputs: Record<string, TimeDisaggregationDefinition>;
};
/**
 * Utility plugin to `unwrap` a time intervals into sub-intervals between a start and end, and select the duration of each new sub-interval.
 *
 * @param definition: the desired {@link TimeDisaggregatePluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link TimeDisaggregatePluginDefinition} contents
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasource to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  // // create a time aggregation for a table
 *  const plugin = TimeDisaggregatePlugin({
 *      inputs: {
 *          One: TimeDisaggregation({
 *              table: datasource_one.output,
 *              start: datasource_one.output.fields.StartDate,
 *              end: datasource_one.output.fields.EndDate,
 *          })
 *      }
 *  })
 * ```
 */
export declare function TimeDisaggregatePlugin(config: TimeDisaggregatePluginDefinition): ELARASchema;
