// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { EastFunction, Variable } from '../east/functions';
import { ELARASchema } from '../schema/ELARASchema';
import { Table } from '../data/Table';
/**
 * A {@link TimeBoundsDefinition} to define an individual time bound for the {@link TimeBoundsPlugin}.
 *
 * @category DataSource
 */
export declare type TimeBoundsDefinition = {
    /** the {@link Table} to aggregate */
    table: Table;
    /** the {@link Expression} to base time groups off */
    value: EastFunction<"datetime">;
    /** evaulate to true for values that should be kept */
    filter?: Variable<"boolean">;
};
/**
 * Create a {@link TimeBoundsDefinition} to define an individual time bound for the {@link TimeBounds}.
 *
 * @param definition: the desired {@link TimeBoundsDefinition}.
 * @return a valid {@link TimeBounds}
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasource to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  // Create a time bound
 *  const aggregation = TimeBounds({
 *       table: datasource_one.output,
 *       value: datasource_one.output.fields.Date,
 *       aggregations: {
 *           TotalQty: Sum(datasource_one.output.fields.Qty)
 *       }
 *  })
 * ```
 */
export declare function TimeBounds(definition: TimeBoundsDefinition): TimeBoundsDefinition;
/**
 * A {@link TimeBoundsPluginDefinition} to configure the {@link TimeBoundsPlugin}.
 *
 * @category DataSource
 */
export declare type TimeBoundsPluginDefinition = {
    /** the name for the {@link TimeBoundsPlugin}  */
    name: string;
    /** the collection of {@link TimeBounds}s to apply */
    inputs: TimeBoundsDefinition[];
    /** Prepend the artefact names with this */
    prepend?: string;
};
/**
 * Utility plugin to calculate the temporal bounds [minimum date, maximum date] accross the multiple tables.
 *
 * @param definition: the desired {@link TimeBoundsPluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link TimeBoundsPluginDefinition} contents
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasource to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  // create a time bound for a table
 *  const plugin = TimeBoundsPlugin({
 *      inputs: {
 *          One: TimeBounds({
 *              table: datasource_one.output,
 *              value: datasource_one.output.fields.Date,
 *              aggregations: {
 *                  TotalQty: Sum(datasource_one.output.fields.Qty)
 *              }
 *          })
 *      }
 *  })
 * ```
 */
export declare function TimeBoundsPlugin(config: TimeBoundsPluginDefinition): ELARASchema;
