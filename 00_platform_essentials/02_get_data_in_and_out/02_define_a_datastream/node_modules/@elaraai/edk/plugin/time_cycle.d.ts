// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { Expression } from '../east/definition';
import { TimeUnit, Variable } from '../east/functions';
import { ELARASchema } from '../schema/ELARASchema';
import { Table } from '../data/Table';
/**
 * A {@link TimeCycleDefinition} to define time interval for a cycle for the {@link TimeCyclePlugin}.
 *
 * @category DataSource
 */
export declare type TimeCycleDefinition = {
    /** the {@link Table} to define the intersections for */
    table: Table;
    /** the {@link Expression} for the cycle datetime value */
    value: Variable<"datetime">;
};
/**
 * Create a {@link TimeCycleDefinition} to define time interval for a cycle for the {@link TimeCyclePlugin}.
 *
 * @param definition: the desired {@link TimeCycleDefinition}.
 * @return a valid {@link TimeCycle}
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasource to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  // Create a time interval intersection
 *  const intersection = TimeCycle({
 *       table: datasource_one.output,
 *       start: datasource_one.output.fields.StartDate,
 *       end: datasource_one.output.fields.EndDate,
 *  })
 * ```
 */
export declare function TimeCycle(definition: TimeCycleDefinition): TimeCycleDefinition;
/**
 * A {@link TimeCyclePluginDefinition} to configure the {@link TimeCyclePlugin}.
 *
 * @category DataSource
 */
export declare type TimeCyclePluginDefinition = {
    /** name of the resulting {@link Pipeline} */
    name: string;
    /** the collection of {@link TimeCycle}s to apply */
    inputs: TimeCycleDefinition[];
    /** the {@link TimeUnit} of each cycle */
    unit: TimeUnit;
    /** the {@link Variable} for the cycle interval date */
    tick?: Variable<"datetime">;
    /** the {@link Variable} for the cycle interval number */
    cycle?: Variable<"integer">;
    /** the {@link Expression} for the number of future cycles */
    future_cycles?: Expression<"integer">;
    /** the {@link Expression} predicate to filter out values */
    filter?: Expression<"boolean">;
};
/**
 * Utility plugin to generate time unit cycles over the intersection of some input date ranges, time cycle 0 occurs at the end of the input data range
 *
 * @param definition: the desired {@link TimeCyclePluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link TimeCyclePluginDefinition} contents
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *  // get the datasources to add to the plugin
 *  import datasource_one from './gen/datasource_one.datasource'
 *  import datasource_two from './gen/datasource_two.datasource'
 *  // get time cycles from both datasources
 *  const plugin = TimeCyclePlugin({
 *      unit: 'hour',
 *      future_cycles: 12,
 *      inputs: [
 *          TimeCycle({
 *              table: datasource_one.output,
 *              value: datasource_one.output.fields.Date,
 *          }),
 *          TimeCycle({
 *              table: datasource_two.output,
 *              value: datasource_two.output.fields.Date,
 *          }),
 *      ]
 *  })
 * ```
 */
export declare function TimeCyclePlugin(config: TimeCyclePluginDefinition): ELARASchema;
