// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { PartitionDefinition } from '../data/Table';
import { ELARASchema } from '../schema';
import { AgentStructure } from '../structure/Agent';
import { ProcessStructure } from '../structure/Process';
import { PropertyStructure } from '../structure/Property';
import { ResourceStructure } from '../structure/Resource';
/** @internal */
declare type ExternalPropertySelection = {
    property: PropertyStructure;
    marker?: PropertyStructure<"string">;
};
/**
 * A {@link SimulationPlugin} convenience function to simplify reporting of all process properties.
 *
 * @category Structure
 */
export declare function SimulationProcessProperties(process: ProcessStructure): Record<string, PropertyStructure>;
/**
 * A {@link SimulationPluginDefinition} to configure the {@link SimulationPlugin}.
 *
 * @category Structure
 */
export declare type SimulationPluginDefinition = {
    /** the name of the plugin pipeline output  */
    name: string;
    /** the entity to create the plugin from */
    entity: AgentStructure | ResourceStructure | ProcessStructure;
    /** the properties to include from the entity */
    properties: Record<string, PropertyStructure | ExternalPropertySelection>;
    /** overwrite the marker field name with this string */
    marker?: string;
    /** the partitions to create in the result */
    partitions?: Record<string, PartitionDefinition>;
    /** prepend the artefact names with this */
    prepend?: string;
    /** true if information about operations be included  */
    operations?: boolean;
    /** true if information about ml functions be included  */
    ml?: boolean;
};
/**
 * Construct a {@link Pipeline} whose output contains the simulation results for the specified entity's properties per scenario with supporting diagnostic pages.
 *
 * @param definition: the desired {@link SimulationPluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link SimulationPluginDefinition} contents
 *
 * @category Structure
 *
 * @example
 * ```typescript
 *   // import a `Resource` Schema containing the `MLFunction`.
 *   import cash from "./gen/cash.structure"
 *   //Create a SimulationPlugin generating results pipeline for a cash balance.
 *   const simulation = SimulationPlugin({
 *       name: "Cash Balance",
 *       entity: cash,
 *       properties: {
 *           "Balance": money.properties.balance,
 *       }
 *   })
 * ```
 */
export declare function SimulationPlugin(def: SimulationPluginDefinition): ELARASchema;
export {};
