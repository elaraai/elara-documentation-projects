// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { ELARASchema } from '../schema/ELARASchema';
import { FunctionPropertyStructure, SettablePropertyStructure } from '../structure';
import { AgentStructure } from '../structure/Agent';
import { ProcessStructure } from '../structure/Process';
import { TemporalPropertyStructure, ValuePropertyStructure } from '../structure/Property';
import { ResourceStructure } from '../structure/Resource';
import { Scenario } from '../structure/Scenario';
/**
 * A {@link ScenarioFlattenPluginDefinition} to configure the {@link ScenarioFlattenPlugin}.
 *
 * @category DataSource
 */
export declare type ScenarioFlattenPluginDefinition = {
    /** name of the resulting {@link Pipeline} */
    name: string;
    /** the entity to create the plugin from */
    entity: AgentStructure | ResourceStructure | ProcessStructure;
    /** The {@link PropertyStructure}'s containing values in scenarios to flatten */
    values: Record<string, ValuePropertyStructure | TemporalPropertyStructure | FunctionPropertyStructure | SettablePropertyStructure>;
    /** the collection of {@link Scenario}s to apply */
    scenarios: Scenario[];
    /** Prepend the artefact names with this */
    prepend?: string;
};
/**
 * Create a {@link ELARASchema} to assist with tranposing values in multiple scenarios (scenario per row) into a direct comparison with values per scenario (scenario per field)
 *
 * @param definition: the desired {@link ScenarioFlattenPluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link ScenarioFlattenPluginDefinition} contents
 *
 * @category Structure
 *
 * @example
 * ```typescript
 *   // Import a baseline Scenario Schema used in options
 *   import baseline from '../../gen/baseline.scenario'
 *   // import a `Resource` Schema containing `Property` of interest.
 *   import cash from 'gen/cash.structure'
 *   // import a the comparison scenario.
 *   import optimized from '../../gen/optimized.scenario'
 *   // import a the sales process.
 *   import sales from '../../gen/sales.structure'
 *   // Create an `ScenarioFlattenPlugin` for performing value and option comparison.
 *   const options = ScenarioFlattenPlugin({
 *       name: "sales comparison",
 *       entity: sales,
 *       scenarios: [baseline, optimized],
 *       values: {
 *           date: sales.date,
 *           qty: sales.properties.qty,
 *           cost: sales.properties.cost,
 *           profit: sales.properties.profit,
 *       },
 *   })
 * ```
 */
export declare function ScenarioFlattenPlugin(config: ScenarioFlattenPluginDefinition): ELARASchema;
