// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { TimeSpan } from "../east";
import { Cache } from "../datasource";
import { ELARASchema } from "../schema";
/**
 * The scope to be applied to to the {@link DeputyPlugin}.
 *
 * @category DataSource
 */
export declare type DeputyScope = 'Employee' | 'Leave' | 'Pay' | 'Roster' | 'Operations' | 'Timesheet' | 'Task';
/**
 * The environment variables to define an {@link DeputyPlugin}.
 *
 * @category DataSource
 */
export declare type DeputyEnv = {
    DEPUTY_CLIENT_URL?: string;
    DEPUTY_CLIENT_ID?: string;
};
/**
 * A {@link DeputyPluginDefinition} to configure the {@link DeputyPlugin}.
 *
 * @category DataSource
 */
export declare type DeputyPluginDefinition = {
    /** the {@link TimeSpan} indicating the total history to query */
    history?: TimeSpan;
    /** the {@link TimeSpan} indicating the history to query on updates */
    update_history?: TimeSpan;
    /** the {@link TimeSpan} indicating the future to query */
    future?: TimeSpan;
    /** the configuration of the DataSource {@link Poll} */
    poll?: TimeSpan;
    /** the set of {@link DeputyScope}'s to apply to the API */
    scope?: Set<DeputyScope>;
    /**  the configuration of the {@link Cache} for the DataSource. */
    cache?: Cache;
    /** the environment variables to apply to the {@link AroFloPlugin} */
    env?: DeputyEnv;
};
/**
 * Create a streaming {@link DataSourceDefinition} for the Deputy API with supporting diagnostic pages: {@link https://www.deputy.com/api-doc/API/Getting_Started}.
 *
 * @param definition: the desired {@link DeputyPluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link DeputyPluginDefinition} contents
 *
 * @category DataSource
 *
 * @example
 * ```typescript
 *   // Create an DeputyPlugin poll an initial four weeks of data, and then the last hour (and next week) of data from the API every `hour` for `Roster` and `Timesheet` with default environment names.
 *   const deputy = DeputyPlugin({
 *       history: TimeSpan(4, 'week'),
 *       update_history: TimeSpan(1),
 *       future: TimeSpan(2, 'week'),
 *       poll: TimeSpan(1),
 *       scope: new Set(['Roster', 'Timesheet']),
 *   })
 *  ```
 */
export declare function DeputyPlugin(args?: DeputyPluginDefinition): ELARASchema;
