// Â© Copyright 2018- 2022 - Elara AI Pty Ltd ACN 627 124 903
//
// Licensed under the EDK Licence version LICENSE-1.04.
//
// You may only use this file in accordance with the terms and conditions contained in EDK
// Licence - Version LICENSE-1.04. The full version of the EDK Licence is available at:
// https://elaraai.github.io/docs/license

import { ELARASchema } from '../schema';
import { AgentStructure } from '../structure/Agent';
import { OptionPropertyStructure } from '../structure/Option';
import { ProcessStructure } from '../structure/Process';
import { PropertyStructure, TemporalPropertyStructure } from '../structure/Property';
import { ResourceStructure } from '../structure/Resource';
import { Scenario } from '../structure/Scenario';
/**
 * A {@link ScenarioComparePluginDefinition} to configure the {@link ScenarioComparePlugin}.
 *
 * @category Structure
 */
export declare type ScenarioComparePluginDefinition = {
    /** the name for the {@link ScenarioComparePlugin}  */
    name: string;
    /** the entity to create the plugin from */
    entity: AgentStructure | ResourceStructure | ProcessStructure;
    /** The {@link OptionPropertyStructure}'s containing manual scenarios to compare */
    values?: Record<string, PropertyStructure>;
    /** The {@link OptionPropertyStructure}'s containing manual scenarios to compare */
    options: Record<string, OptionPropertyStructure<'float'>>;
    /** The baseline {@link Scenario} of interest */
    baseline_scenario: Scenario;
    /** The comparison {@link Scenario} of interest */
    comparison_scenario: Scenario;
    /** the entity containing the temporal output */
    output_entity?: AgentStructure | ResourceStructure;
    /** The output of interest {@link TemporalPropertyStructure} to inspect */
    output?: TemporalPropertyStructure<'float'>;
    /** Prepend the artefact names with this */
    prepend?: string;
    /** The linear color range for displaying the change in alues */
    linear_pallette?: [negative_color: string, zero_color: string, positive_color: string];
    /** The ordinal color range for displaying the outputs */
    ordinal_pallette?: string[];
};
/**
 * Create a {@link ELARASchema} to assist with value and option comparison between two scenarios.
 *
 * @param definition: the desired {@link ScenarioComparePluginDefinition}.
 * @return a {@link ELARASchema} containing a {@link ScenarioComparePluginDefinition} contents
 *
 * @category Structure
 *
 * @example
 * ```typescript
 *   // Import a baseline Scenario Schema used in options
 *   import baseline from '../../gen/baseline.scenario'
 *   // import a `Resource` Schema containing `Property` of interest.
 *   import cash from 'gen/cash.structure'
 *   // import a the comparison scenario.
 *   import optimized from '../../gen/optimized.scenario'
 *   // import a the sales process.
 *   import sales from '../../gen/sales.structure'
 *   // Create an `ScenarioComparePlugin` for performing value and option comparison.
 *   const options = ScenarioComparePlugin({
 *       name: "sales",
 *       entity: sales,
 *       scenario: baseline,
 *       options: {
 *           price: sales.properties.price,
 *       },
 *       values: {
 *           date: sales.date,
 *           qty: sales.properties.qty,
 *           cost: sales.properties.cost,
 *           profit: sales.properties.profit,
 *       },
 *       output_entity: cash,
 *       output: cash.properties.balance,
 *   })
 * ```
 */
export declare function ScenarioComparePlugin(config: ScenarioComparePluginDefinition): ELARASchema;
